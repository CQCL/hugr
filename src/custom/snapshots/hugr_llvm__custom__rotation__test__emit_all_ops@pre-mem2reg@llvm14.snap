---
source: src/custom/rotation.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1(double %0) {
alloca_block:
  %"2_0" = alloca double, align 8
  %"4_0" = alloca double, align 8
  %"5_0" = alloca { i32, {}, { double } }, align 8
  %"6_0" = alloca double, align 8
  %"0" = alloca double, align 8
  %"11_0" = alloca { i32, i8* }, align 8
  %"12_0" = alloca double, align 8
  %"07" = alloca double, align 8
  %"14_0" = alloca double, align 8
  %"16_0" = alloca double, align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store double %0, double* %"2_0", align 8
  %"2_01" = load double, double* %"2_0", align 8
  %1 = fdiv double %"2_01", 2.000000e+00
  %2 = call double @llvm.floor.f64(double %1)
  %3 = fsub double %1, %2
  %4 = fmul double %3, 2.000000e+00
  store double %4, double* %"4_0", align 8
  %"4_02" = load double, double* %"4_0", align 8
  %5 = fcmp oeq double %"4_02", 0x7FF0000000000000
  %6 = fcmp oeq double %"4_02", 0xFFF0000000000000
  %7 = fcmp uno double %"4_02", 0.000000e+00
  %8 = or i1 %5, %6
  %9 = or i1 %8, %7
  %10 = xor i1 %9, true
  %11 = insertvalue { double } undef, double %"4_02", 0
  %12 = insertvalue { i32, {}, { double } } { i32 1, {} poison, { double } poison }, { double } %11, 2
  %13 = select i1 %10, { i32, {}, { double } } %12, { i32, {}, { double } } { i32 0, {} undef, { double } poison }
  store { i32, {}, { double } } %13, { i32, {}, { double } }* %"5_0", align 8
  %"5_03" = load { i32, {}, { double } }, { i32, {}, { double } }* %"5_0", align 8
  %14 = extractvalue { i32, {}, { double } } %"5_03", 0
  switch i32 %14, label %15 [
    i32 1, label %17
  ]

15:                                               ; preds = %entry_block
  %16 = extractvalue { i32, {}, { double } } %"5_03", 1
  br label %cond_6_case_0

17:                                               ; preds = %entry_block
  %18 = extractvalue { i32, {}, { double } } %"5_03", 2
  %19 = extractvalue { double } %18, 0
  store double %19, double* %"07", align 8
  br label %cond_6_case_1

cond_6_case_0:                                    ; preds = %15
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, { i32, i8* }* %"11_0", align 8
  %"11_05" = load { i32, i8* }, { i32, i8* }* %"11_0", align 8
  %20 = extractvalue { i32, i8* } %"11_05", 0
  %21 = extractvalue { i32, i8* } %"11_05", 1
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %20, i8* %21)
  call void @abort()
  store double 0.000000e+00, double* %"12_0", align 8
  %"12_06" = load double, double* %"12_0", align 8
  store double %"12_06", double* %"0", align 8
  br label %cond_exit_6

cond_6_case_1:                                    ; preds = %17
  %"08" = load double, double* %"07", align 8
  store double %"08", double* %"14_0", align 8
  %"14_09" = load double, double* %"14_0", align 8
  store double %"14_09", double* %"0", align 8
  br label %cond_exit_6

cond_exit_6:                                      ; preds = %cond_6_case_1, %cond_6_case_0
  %"04" = load double, double* %"0", align 8
  store double %"04", double* %"6_0", align 8
  %"2_010" = load double, double* %"2_0", align 8
  %"6_011" = load double, double* %"6_0", align 8
  %23 = fadd double %"2_010", %"6_011"
  store double %23, double* %"16_0", align 8
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #0

declare i32 @printf(i8*, ...)

declare void @abort()

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
