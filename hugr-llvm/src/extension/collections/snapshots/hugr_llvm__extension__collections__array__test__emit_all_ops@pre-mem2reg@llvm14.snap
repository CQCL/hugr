---
source: hugr-llvm/src/extension/collections/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  %"12_0" = alloca i64, align 8
  %"10_0" = alloca i64, align 8
  %"13_0" = alloca [2 x i64], align 8
  %"8_0" = alloca i64, align 8
  %"14_0" = alloca { i1, [2 x i64] }, align 8
  %"0" = alloca { i1, [2 x i64] }, align 8
  %"16_0" = alloca [2 x i64], align 8
  %"014" = alloca [2 x i64], align 8
  %"016" = alloca [2 x i64], align 8
  %"21_0" = alloca { i32, i8* }, align 8
  %"18_0" = alloca [2 x i64], align 8
  %"22_0" = alloca [2 x i64], align 8
  %"023" = alloca [2 x i64], align 8
  %"24_0" = alloca [2 x i64], align 8
  %"26_0" = alloca { i1, i64 }, align 8
  %"030" = alloca { i1, i64 }, align 8
  %"28_0" = alloca i64, align 8
  %"034" = alloca i64, align 8
  %"33_0" = alloca { i32, i8* }, align 8
  %"34_0" = alloca i64, align 8
  %"039" = alloca i64, align 8
  %"36_0" = alloca i64, align 8
  %"38_0" = alloca { i1, i64, [2 x i64] }, align 8
  %"048" = alloca { i1, i64, [2 x i64] }, align 8
  %"40_0" = alloca i64, align 8
  %"40_1" = alloca [2 x i64], align 8
  %"052" = alloca i64, align 8
  %"1" = alloca [2 x i64], align 8
  %"055" = alloca i64, align 8
  %"156" = alloca [2 x i64], align 8
  %"45_0" = alloca { i32, i8* }, align 8
  %"42_0" = alloca i64, align 8
  %"42_1" = alloca [2 x i64], align 8
  %"46_0" = alloca i64, align 8
  %"46_1" = alloca [2 x i64], align 8
  %"067" = alloca i64, align 8
  %"168" = alloca [2 x i64], align 8
  %"48_0" = alloca i64, align 8
  %"48_1" = alloca [2 x i64], align 8
  %"50_0" = alloca { i1, i64, [1 x i64] }, align 8
  %"51_0" = alloca i64, align 8
  %"51_1" = alloca [1 x i64], align 8
  %"077" = alloca i64, align 8
  %"178" = alloca [1 x i64], align 8
  %"56_0" = alloca { i32, i8* }, align 8
  %"57_0" = alloca i64, align 8
  %"57_1" = alloca [1 x i64], align 8
  %"085" = alloca i64, align 8
  %"186" = alloca [1 x i64], align 8
  %"59_0" = alloca i64, align 8
  %"59_1" = alloca [1 x i64], align 8
  %"61_0" = alloca { i1, i64 }, align 8
  %"62_0" = alloca i64, align 8
  %"62_1" = alloca [0 x i64], align 8
  %"095" = alloca i64, align 8
  %"196" = alloca [0 x i64], align 8
  %"67_0" = alloca { i32, i8* }, align 8
  %"68_0" = alloca i64, align 8
  %"68_1" = alloca [0 x i64], align 8
  %"0103" = alloca i64, align 8
  %"1104" = alloca [0 x i64], align 8
  %"70_0" = alloca i64, align 8
  %"70_1" = alloca [0 x i64], align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 2, i64* %"12_0", align 4
  store i64 1, i64* %"10_0", align 4
  %"10_01" = load i64, i64* %"10_0", align 4
  %"12_02" = load i64, i64* %"12_0", align 4
  %"10_03" = load i64, i64* %"10_0", align 4
  %"12_04" = load i64, i64* %"12_0", align 4
  %0 = insertvalue [2 x i64] undef, i64 %"10_03", 0
  %1 = insertvalue [2 x i64] %0, i64 %"12_04", 1
  store [2 x i64] %1, [2 x i64]* %"13_0", align 4
  store i64 0, i64* %"8_0", align 4
  %"13_05" = load [2 x i64], [2 x i64]* %"13_0", align 4
  %"8_06" = load i64, i64* %"8_0", align 4
  %"10_07" = load i64, i64* %"10_0", align 4
  %"13_08" = load [2 x i64], [2 x i64]* %"13_0", align 4
  %"8_09" = load i64, i64* %"8_0", align 4
  %"10_010" = load i64, i64* %"10_0", align 4
  %2 = icmp ult i64 %"8_09", 2
  %3 = icmp ult i64 %"10_010", 2
  %4 = and i1 %2, %3
  br i1 %4, label %7, label %5

5:                                                ; preds = %entry_block
  %6 = insertvalue { i1, [2 x i64] } { i1 false, [2 x i64] poison }, [2 x i64] %"13_08", 1
  store { i1, [2 x i64] } %6, { i1, [2 x i64] }* %"0", align 4
  br label %17

7:                                                ; preds = %entry_block
  %8 = alloca i64, i32 2, align 8
  %9 = bitcast i64* %8 to [2 x i64]*
  store [2 x i64] %"13_08", [2 x i64]* %9, align 4
  %10 = getelementptr inbounds i64, i64* %8, i64 %"8_09"
  %11 = load i64, i64* %10, align 4
  %12 = getelementptr inbounds i64, i64* %8, i64 %"10_010"
  %13 = load i64, i64* %12, align 4
  store i64 %13, i64* %10, align 4
  store i64 %11, i64* %12, align 4
  %14 = bitcast i64* %8 to [2 x i64]*
  %15 = load [2 x i64], [2 x i64]* %14, align 4
  %16 = insertvalue { i1, [2 x i64] } { i1 true, [2 x i64] poison }, [2 x i64] %15, 1
  store { i1, [2 x i64] } %16, { i1, [2 x i64] }* %"0", align 4
  br label %17

17:                                               ; preds = %5, %7
  %"011" = load { i1, [2 x i64] }, { i1, [2 x i64] }* %"0", align 4
  store { i1, [2 x i64] } %"011", { i1, [2 x i64] }* %"14_0", align 4
  %"14_012" = load { i1, [2 x i64] }, { i1, [2 x i64] }* %"14_0", align 4
  %"14_013" = load { i1, [2 x i64] }, { i1, [2 x i64] }* %"14_0", align 4
  %18 = extractvalue { i1, [2 x i64] } %"14_013", 0
  switch i1 %18, label %19 [
    i1 true, label %21
  ]

19:                                               ; preds = %17
  %20 = extractvalue { i1, [2 x i64] } %"14_013", 1
  store [2 x i64] %20, [2 x i64]* %"016", align 4
  br label %cond_16_case_0

21:                                               ; preds = %17
  %22 = extractvalue { i1, [2 x i64] } %"14_013", 1
  store [2 x i64] %22, [2 x i64]* %"023", align 4
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %"017" = load [2 x i64], [2 x i64]* %"016", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, { i32, i8* }* %"21_0", align 8
  store [2 x i64] %"017", [2 x i64]* %"18_0", align 4
  %"21_018" = load { i32, i8* }, { i32, i8* }* %"21_0", align 8
  %"18_019" = load [2 x i64], [2 x i64]* %"18_0", align 4
  %"21_020" = load { i32, i8* }, { i32, i8* }* %"21_0", align 8
  %"18_021" = load [2 x i64], [2 x i64]* %"18_0", align 4
  %23 = extractvalue { i32, i8* } %"21_020", 0
  %24 = extractvalue { i32, i8* } %"21_020", 1
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %23, i8* %24)
  call void @abort()
  store [2 x i64] zeroinitializer, [2 x i64]* %"22_0", align 4
  %"22_022" = load [2 x i64], [2 x i64]* %"22_0", align 4
  store [2 x i64] %"22_022", [2 x i64]* %"014", align 4
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %21
  %"024" = load [2 x i64], [2 x i64]* %"023", align 4
  store [2 x i64] %"024", [2 x i64]* %"24_0", align 4
  %"24_025" = load [2 x i64], [2 x i64]* %"24_0", align 4
  store [2 x i64] %"24_025", [2 x i64]* %"014", align 4
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"015" = load [2 x i64], [2 x i64]* %"014", align 4
  store [2 x i64] %"015", [2 x i64]* %"16_0", align 4
  %"16_026" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"8_027" = load i64, i64* %"8_0", align 4
  %"16_028" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"8_029" = load i64, i64* %"8_0", align 4
  %26 = icmp ult i64 %"8_029", 2
  br i1 %26, label %28, label %27

27:                                               ; preds = %cond_exit_16
  store { i1, i64 } { i1 false, i64 poison }, { i1, i64 }* %"030", align 4
  br label %34

28:                                               ; preds = %cond_exit_16
  %29 = alloca i64, i32 2, align 8
  %30 = bitcast i64* %29 to [2 x i64]*
  store [2 x i64] %"16_028", [2 x i64]* %30, align 4
  %31 = getelementptr inbounds i64, i64* %29, i64 %"8_029"
  %32 = load i64, i64* %31, align 4
  %33 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %32, 1
  store { i1, i64 } %33, { i1, i64 }* %"030", align 4
  br label %34

34:                                               ; preds = %27, %28
  %"031" = load { i1, i64 }, { i1, i64 }* %"030", align 4
  store { i1, i64 } %"031", { i1, i64 }* %"26_0", align 4
  %"26_032" = load { i1, i64 }, { i1, i64 }* %"26_0", align 4
  %"26_033" = load { i1, i64 }, { i1, i64 }* %"26_0", align 4
  %35 = extractvalue { i1, i64 } %"26_033", 0
  switch i1 %35, label %36 [
    i1 true, label %37
  ]

36:                                               ; preds = %34
  br label %cond_28_case_0

37:                                               ; preds = %34
  %38 = extractvalue { i1, i64 } %"26_033", 1
  store i64 %38, i64* %"039", align 4
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %36
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, { i32, i8* }* %"33_0", align 8
  %"33_036" = load { i32, i8* }, { i32, i8* }* %"33_0", align 8
  %"33_037" = load { i32, i8* }, { i32, i8* }* %"33_0", align 8
  %39 = extractvalue { i32, i8* } %"33_037", 0
  %40 = extractvalue { i32, i8* } %"33_037", 1
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %39, i8* %40)
  call void @abort()
  store i64 0, i64* %"34_0", align 4
  %"34_038" = load i64, i64* %"34_0", align 4
  store i64 %"34_038", i64* %"034", align 4
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %37
  %"040" = load i64, i64* %"039", align 4
  store i64 %"040", i64* %"36_0", align 4
  %"36_041" = load i64, i64* %"36_0", align 4
  store i64 %"36_041", i64* %"034", align 4
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"035" = load i64, i64* %"034", align 4
  store i64 %"035", i64* %"28_0", align 4
  %"16_042" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"10_043" = load i64, i64* %"10_0", align 4
  %"28_044" = load i64, i64* %"28_0", align 4
  %"16_045" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"10_046" = load i64, i64* %"10_0", align 4
  %"28_047" = load i64, i64* %"28_0", align 4
  %42 = icmp ult i64 %"10_046", 2
  br i1 %42, label %46, label %43

43:                                               ; preds = %cond_exit_28
  %44 = insertvalue { i1, i64, [2 x i64] } { i1 false, i64 poison, [2 x i64] poison }, i64 %"28_047", 1
  %45 = insertvalue { i1, i64, [2 x i64] } %44, [2 x i64] %"16_045", 2
  store { i1, i64, [2 x i64] } %45, { i1, i64, [2 x i64] }* %"048", align 4
  br label %55

46:                                               ; preds = %cond_exit_28
  %47 = alloca i64, i32 2, align 8
  %48 = bitcast i64* %47 to [2 x i64]*
  store [2 x i64] %"16_045", [2 x i64]* %48, align 4
  %49 = getelementptr inbounds i64, i64* %47, i64 %"10_046"
  %50 = load i64, i64* %49, align 4
  store i64 %"28_047", i64* %49, align 4
  %51 = bitcast i64* %47 to [2 x i64]*
  %52 = load [2 x i64], [2 x i64]* %51, align 4
  %53 = insertvalue { i1, i64, [2 x i64] } { i1 true, i64 poison, [2 x i64] poison }, i64 %50, 1
  %54 = insertvalue { i1, i64, [2 x i64] } %53, [2 x i64] %52, 2
  store { i1, i64, [2 x i64] } %54, { i1, i64, [2 x i64] }* %"048", align 4
  br label %55

55:                                               ; preds = %43, %46
  %"049" = load { i1, i64, [2 x i64] }, { i1, i64, [2 x i64] }* %"048", align 4
  store { i1, i64, [2 x i64] } %"049", { i1, i64, [2 x i64] }* %"38_0", align 4
  %"38_050" = load { i1, i64, [2 x i64] }, { i1, i64, [2 x i64] }* %"38_0", align 4
  %"38_051" = load { i1, i64, [2 x i64] }, { i1, i64, [2 x i64] }* %"38_0", align 4
  %56 = extractvalue { i1, i64, [2 x i64] } %"38_051", 0
  switch i1 %56, label %57 [
    i1 true, label %60
  ]

57:                                               ; preds = %55
  %58 = extractvalue { i1, i64, [2 x i64] } %"38_051", 1
  %59 = extractvalue { i1, i64, [2 x i64] } %"38_051", 2
  store i64 %58, i64* %"055", align 4
  store [2 x i64] %59, [2 x i64]* %"156", align 4
  br label %cond_40_case_0

60:                                               ; preds = %55
  %61 = extractvalue { i1, i64, [2 x i64] } %"38_051", 1
  %62 = extractvalue { i1, i64, [2 x i64] } %"38_051", 2
  store i64 %61, i64* %"067", align 4
  store [2 x i64] %62, [2 x i64]* %"168", align 4
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %57
  %"057" = load i64, i64* %"055", align 4
  %"158" = load [2 x i64], [2 x i64]* %"156", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, { i32, i8* }* %"45_0", align 8
  store i64 %"057", i64* %"42_0", align 4
  store [2 x i64] %"158", [2 x i64]* %"42_1", align 4
  %"45_059" = load { i32, i8* }, { i32, i8* }* %"45_0", align 8
  %"42_060" = load i64, i64* %"42_0", align 4
  %"42_161" = load [2 x i64], [2 x i64]* %"42_1", align 4
  %"45_062" = load { i32, i8* }, { i32, i8* }* %"45_0", align 8
  %"42_063" = load i64, i64* %"42_0", align 4
  %"42_164" = load [2 x i64], [2 x i64]* %"42_1", align 4
  %63 = extractvalue { i32, i8* } %"45_062", 0
  %64 = extractvalue { i32, i8* } %"45_062", 1
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %63, i8* %64)
  call void @abort()
  store i64 0, i64* %"46_0", align 4
  store [2 x i64] zeroinitializer, [2 x i64]* %"46_1", align 4
  %"46_065" = load i64, i64* %"46_0", align 4
  %"46_166" = load [2 x i64], [2 x i64]* %"46_1", align 4
  store i64 %"46_065", i64* %"052", align 4
  store [2 x i64] %"46_166", [2 x i64]* %"1", align 4
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %60
  %"069" = load i64, i64* %"067", align 4
  %"170" = load [2 x i64], [2 x i64]* %"168", align 4
  store i64 %"069", i64* %"48_0", align 4
  store [2 x i64] %"170", [2 x i64]* %"48_1", align 4
  %"48_071" = load i64, i64* %"48_0", align 4
  %"48_172" = load [2 x i64], [2 x i64]* %"48_1", align 4
  store i64 %"48_071", i64* %"052", align 4
  store [2 x i64] %"48_172", [2 x i64]* %"1", align 4
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"053" = load i64, i64* %"052", align 4
  %"154" = load [2 x i64], [2 x i64]* %"1", align 4
  store i64 %"053", i64* %"40_0", align 4
  store [2 x i64] %"154", [2 x i64]* %"40_1", align 4
  %"40_173" = load [2 x i64], [2 x i64]* %"40_1", align 4
  %"40_174" = load [2 x i64], [2 x i64]* %"40_1", align 4
  %66 = alloca i64, i32 2, align 8
  %67 = bitcast i64* %66 to [2 x i64]*
  store [2 x i64] %"40_174", [2 x i64]* %67, align 4
  %68 = getelementptr i64, i64* %66, i32 1
  %69 = load i64, i64* %66, align 4
  %70 = bitcast i64* %68 to [1 x i64]*
  %71 = load [1 x i64], [1 x i64]* %70, align 4
  %72 = insertvalue { i1, i64, [1 x i64] } { i1 true, i64 poison, [1 x i64] poison }, i64 %69, 1
  %73 = insertvalue { i1, i64, [1 x i64] } %72, [1 x i64] %71, 2
  store { i1, i64, [1 x i64] } %73, { i1, i64, [1 x i64] }* %"50_0", align 4
  %"50_075" = load { i1, i64, [1 x i64] }, { i1, i64, [1 x i64] }* %"50_0", align 4
  %"50_076" = load { i1, i64, [1 x i64] }, { i1, i64, [1 x i64] }* %"50_0", align 4
  %74 = extractvalue { i1, i64, [1 x i64] } %"50_076", 0
  switch i1 %74, label %75 [
    i1 true, label %76
  ]

75:                                               ; preds = %cond_exit_40
  br label %cond_51_case_0

76:                                               ; preds = %cond_exit_40
  %77 = extractvalue { i1, i64, [1 x i64] } %"50_076", 1
  %78 = extractvalue { i1, i64, [1 x i64] } %"50_076", 2
  store i64 %77, i64* %"085", align 4
  store [1 x i64] %78, [1 x i64]* %"186", align 4
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %75
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, { i32, i8* }* %"56_0", align 8
  %"56_081" = load { i32, i8* }, { i32, i8* }* %"56_0", align 8
  %"56_082" = load { i32, i8* }, { i32, i8* }* %"56_0", align 8
  %79 = extractvalue { i32, i8* } %"56_082", 0
  %80 = extractvalue { i32, i8* } %"56_082", 1
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %79, i8* %80)
  call void @abort()
  store i64 0, i64* %"57_0", align 4
  store [1 x i64] zeroinitializer, [1 x i64]* %"57_1", align 4
  %"57_083" = load i64, i64* %"57_0", align 4
  %"57_184" = load [1 x i64], [1 x i64]* %"57_1", align 4
  store i64 %"57_083", i64* %"077", align 4
  store [1 x i64] %"57_184", [1 x i64]* %"178", align 4
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %76
  %"087" = load i64, i64* %"085", align 4
  %"188" = load [1 x i64], [1 x i64]* %"186", align 4
  store i64 %"087", i64* %"59_0", align 4
  store [1 x i64] %"188", [1 x i64]* %"59_1", align 4
  %"59_089" = load i64, i64* %"59_0", align 4
  %"59_190" = load [1 x i64], [1 x i64]* %"59_1", align 4
  store i64 %"59_089", i64* %"077", align 4
  store [1 x i64] %"59_190", [1 x i64]* %"178", align 4
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"079" = load i64, i64* %"077", align 4
  %"180" = load [1 x i64], [1 x i64]* %"178", align 4
  store i64 %"079", i64* %"51_0", align 4
  store [1 x i64] %"180", [1 x i64]* %"51_1", align 4
  %"51_191" = load [1 x i64], [1 x i64]* %"51_1", align 4
  %"51_192" = load [1 x i64], [1 x i64]* %"51_1", align 4
  %82 = alloca i64, align 8
  %83 = bitcast i64* %82 to [1 x i64]*
  store [1 x i64] %"51_192", [1 x i64]* %83, align 4
  %84 = getelementptr i64, i64* %82, i32 0
  %85 = load i64, i64* %84, align 4
  %86 = bitcast i64* %82 to [0 x i64]*
  %87 = load [0 x i64], [0 x i64]* %86, align 4
  %88 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %85, 1
  store { i1, i64 } %88, { i1, i64 }* %"61_0", align 4
  %"61_093" = load { i1, i64 }, { i1, i64 }* %"61_0", align 4
  %"61_094" = load { i1, i64 }, { i1, i64 }* %"61_0", align 4
  %89 = extractvalue { i1, i64 } %"61_094", 0
  switch i1 %89, label %90 [
    i1 true, label %91
  ]

90:                                               ; preds = %cond_exit_51
  br label %cond_62_case_0

91:                                               ; preds = %cond_exit_51
  %92 = extractvalue { i1, i64 } %"61_094", 1
  store i64 %92, i64* %"0103", align 4
  store [0 x i64] undef, [0 x i64]* %"1104", align 4
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %90
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, { i32, i8* }* %"67_0", align 8
  %"67_099" = load { i32, i8* }, { i32, i8* }* %"67_0", align 8
  %"67_0100" = load { i32, i8* }, { i32, i8* }* %"67_0", align 8
  %93 = extractvalue { i32, i8* } %"67_0100", 0
  %94 = extractvalue { i32, i8* } %"67_0100", 1
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %93, i8* %94)
  call void @abort()
  store i64 0, i64* %"68_0", align 4
  store [0 x i64] zeroinitializer, [0 x i64]* %"68_1", align 4
  %"68_0101" = load i64, i64* %"68_0", align 4
  %"68_1102" = load [0 x i64], [0 x i64]* %"68_1", align 4
  store i64 %"68_0101", i64* %"095", align 4
  store [0 x i64] %"68_1102", [0 x i64]* %"196", align 4
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %91
  %"0105" = load i64, i64* %"0103", align 4
  %"1106" = load [0 x i64], [0 x i64]* %"1104", align 4
  store i64 %"0105", i64* %"70_0", align 4
  store [0 x i64] %"1106", [0 x i64]* %"70_1", align 4
  %"70_0107" = load i64, i64* %"70_0", align 4
  %"70_1108" = load [0 x i64], [0 x i64]* %"70_1", align 4
  store i64 %"70_0107", i64* %"095", align 4
  store [0 x i64] %"70_1108", [0 x i64]* %"196", align 4
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"097" = load i64, i64* %"095", align 4
  %"198" = load [0 x i64], [0 x i64]* %"196", align 4
  store i64 %"097", i64* %"62_0", align 4
  store [0 x i64] %"198", [0 x i64]* %"62_1", align 4
  %"62_1109" = load [0 x i64], [0 x i64]* %"62_1", align 4
  %"62_1110" = load [0 x i64], [0 x i64]* %"62_1", align 4
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
