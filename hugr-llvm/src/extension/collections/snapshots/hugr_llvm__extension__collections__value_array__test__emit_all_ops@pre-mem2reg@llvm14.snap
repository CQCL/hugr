---
source: hugr-llvm/src/extension/collections/value_array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  %"12_0" = alloca i64, align 8
  %"10_0" = alloca i64, align 8
  %"13_0" = alloca [2 x i64], align 8
  %"8_0" = alloca i64, align 8
  %"14_0" = alloca { i1, [2 x i64] }, align 8
  %"0" = alloca { i1, [2 x i64] }, align 8
  %"16_0" = alloca [2 x i64], align 8
  %"08" = alloca [2 x i64], align 8
  %"010" = alloca [2 x i64], align 8
  %"21_0" = alloca { i32, i8* }, align 8
  %"18_0" = alloca [2 x i64], align 8
  %"22_0" = alloca [2 x i64], align 8
  %"015" = alloca [2 x i64], align 8
  %"24_0" = alloca [2 x i64], align 8
  %"26_0" = alloca { i1, i64 }, align 8
  %"26_1" = alloca [2 x i64], align 8
  %"020" = alloca { i1, i64 }, align 8
  %"1" = alloca [2 x i64], align 8
  %"28_0" = alloca i64, align 8
  %"024" = alloca i64, align 8
  %"33_0" = alloca { i32, i8* }, align 8
  %"34_0" = alloca i64, align 8
  %"028" = alloca i64, align 8
  %"36_0" = alloca i64, align 8
  %"38_0" = alloca { i1, i64, [2 x i64] }, align 8
  %"034" = alloca { i1, i64, [2 x i64] }, align 8
  %"40_0" = alloca i64, align 8
  %"40_1" = alloca [2 x i64], align 8
  %"037" = alloca i64, align 8
  %"138" = alloca [2 x i64], align 8
  %"041" = alloca i64, align 8
  %"142" = alloca [2 x i64], align 8
  %"45_0" = alloca { i32, i8* }, align 8
  %"42_0" = alloca i64, align 8
  %"42_1" = alloca [2 x i64], align 8
  %"46_0" = alloca i64, align 8
  %"46_1" = alloca [2 x i64], align 8
  %"050" = alloca i64, align 8
  %"151" = alloca [2 x i64], align 8
  %"48_0" = alloca i64, align 8
  %"48_1" = alloca [2 x i64], align 8
  %"50_0" = alloca { i1, i64, [1 x i64] }, align 8
  %"51_0" = alloca i64, align 8
  %"51_1" = alloca [1 x i64], align 8
  %"058" = alloca i64, align 8
  %"159" = alloca [1 x i64], align 8
  %"56_0" = alloca { i32, i8* }, align 8
  %"57_0" = alloca i64, align 8
  %"57_1" = alloca [1 x i64], align 8
  %"065" = alloca i64, align 8
  %"166" = alloca [1 x i64], align 8
  %"59_0" = alloca i64, align 8
  %"59_1" = alloca [1 x i64], align 8
  %"61_0" = alloca { i1, i64 }, align 8
  %"62_0" = alloca i64, align 8
  %"62_1" = alloca [0 x i64], align 8
  %"073" = alloca i64, align 8
  %"174" = alloca [0 x i64], align 8
  %"67_0" = alloca { i32, i8* }, align 8
  %"68_0" = alloca i64, align 8
  %"68_1" = alloca [0 x i64], align 8
  %"080" = alloca i64, align 8
  %"181" = alloca [0 x i64], align 8
  %"70_0" = alloca i64, align 8
  %"70_1" = alloca [0 x i64], align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 2, i64* %"12_0", align 4
  store i64 1, i64* %"10_0", align 4
  %"10_01" = load i64, i64* %"10_0", align 4
  %"12_02" = load i64, i64* %"12_0", align 4
  %0 = insertvalue [2 x i64] undef, i64 %"10_01", 0
  %1 = insertvalue [2 x i64] %0, i64 %"12_02", 1
  store [2 x i64] %1, [2 x i64]* %"13_0", align 4
  store i64 0, i64* %"8_0", align 4
  %"13_03" = load [2 x i64], [2 x i64]* %"13_0", align 4
  %"8_04" = load i64, i64* %"8_0", align 4
  %"10_05" = load i64, i64* %"10_0", align 4
  %2 = icmp ult i64 %"8_04", 2
  %3 = icmp ult i64 %"10_05", 2
  %4 = and i1 %2, %3
  br i1 %4, label %7, label %5

5:                                                ; preds = %entry_block
  %6 = insertvalue { i1, [2 x i64] } { i1 false, [2 x i64] poison }, [2 x i64] %"13_03", 1
  store { i1, [2 x i64] } %6, { i1, [2 x i64] }* %"0", align 4
  br label %17

7:                                                ; preds = %entry_block
  %8 = alloca i64, i32 2, align 8
  %9 = bitcast i64* %8 to [2 x i64]*
  store [2 x i64] %"13_03", [2 x i64]* %9, align 4
  %10 = getelementptr inbounds i64, i64* %8, i64 %"8_04"
  %11 = load i64, i64* %10, align 4
  %12 = getelementptr inbounds i64, i64* %8, i64 %"10_05"
  %13 = load i64, i64* %12, align 4
  store i64 %13, i64* %10, align 4
  store i64 %11, i64* %12, align 4
  %14 = bitcast i64* %8 to [2 x i64]*
  %15 = load [2 x i64], [2 x i64]* %14, align 4
  %16 = insertvalue { i1, [2 x i64] } { i1 true, [2 x i64] poison }, [2 x i64] %15, 1
  store { i1, [2 x i64] } %16, { i1, [2 x i64] }* %"0", align 4
  br label %17

17:                                               ; preds = %5, %7
  %"06" = load { i1, [2 x i64] }, { i1, [2 x i64] }* %"0", align 4
  store { i1, [2 x i64] } %"06", { i1, [2 x i64] }* %"14_0", align 4
  %"14_07" = load { i1, [2 x i64] }, { i1, [2 x i64] }* %"14_0", align 4
  %18 = extractvalue { i1, [2 x i64] } %"14_07", 0
  switch i1 %18, label %19 [
    i1 true, label %21
  ]

19:                                               ; preds = %17
  %20 = extractvalue { i1, [2 x i64] } %"14_07", 1
  store [2 x i64] %20, [2 x i64]* %"010", align 4
  br label %cond_16_case_0

21:                                               ; preds = %17
  %22 = extractvalue { i1, [2 x i64] } %"14_07", 1
  store [2 x i64] %22, [2 x i64]* %"015", align 4
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %"011" = load [2 x i64], [2 x i64]* %"010", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, { i32, i8* }* %"21_0", align 8
  store [2 x i64] %"011", [2 x i64]* %"18_0", align 4
  %"21_012" = load { i32, i8* }, { i32, i8* }* %"21_0", align 8
  %"18_013" = load [2 x i64], [2 x i64]* %"18_0", align 4
  %23 = extractvalue { i32, i8* } %"21_012", 0
  %24 = extractvalue { i32, i8* } %"21_012", 1
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %23, i8* %24)
  call void @abort()
  store [2 x i64] zeroinitializer, [2 x i64]* %"22_0", align 4
  %"22_014" = load [2 x i64], [2 x i64]* %"22_0", align 4
  store [2 x i64] %"22_014", [2 x i64]* %"08", align 4
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %21
  %"016" = load [2 x i64], [2 x i64]* %"015", align 4
  store [2 x i64] %"016", [2 x i64]* %"24_0", align 4
  %"24_017" = load [2 x i64], [2 x i64]* %"24_0", align 4
  store [2 x i64] %"24_017", [2 x i64]* %"08", align 4
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"09" = load [2 x i64], [2 x i64]* %"08", align 4
  store [2 x i64] %"09", [2 x i64]* %"16_0", align 4
  %"16_018" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"8_019" = load i64, i64* %"8_0", align 4
  %26 = icmp ult i64 %"8_019", 2
  br i1 %26, label %28, label %27

27:                                               ; preds = %cond_exit_16
  store { i1, i64 } { i1 false, i64 poison }, { i1, i64 }* %"020", align 4
  store [2 x i64] %"16_018", [2 x i64]* %"1", align 4
  br label %34

28:                                               ; preds = %cond_exit_16
  %29 = alloca i64, i32 2, align 8
  %30 = bitcast i64* %29 to [2 x i64]*
  store [2 x i64] %"16_018", [2 x i64]* %30, align 4
  %31 = getelementptr inbounds i64, i64* %29, i64 %"8_019"
  %32 = load i64, i64* %31, align 4
  %33 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %32, 1
  store { i1, i64 } %33, { i1, i64 }* %"020", align 4
  store [2 x i64] %"16_018", [2 x i64]* %"1", align 4
  br label %34

34:                                               ; preds = %27, %28
  %"021" = load { i1, i64 }, { i1, i64 }* %"020", align 4
  %"122" = load [2 x i64], [2 x i64]* %"1", align 4
  store { i1, i64 } %"021", { i1, i64 }* %"26_0", align 4
  store [2 x i64] %"122", [2 x i64]* %"26_1", align 4
  %"26_023" = load { i1, i64 }, { i1, i64 }* %"26_0", align 4
  %35 = extractvalue { i1, i64 } %"26_023", 0
  switch i1 %35, label %36 [
    i1 true, label %37
  ]

36:                                               ; preds = %34
  br label %cond_28_case_0

37:                                               ; preds = %34
  %38 = extractvalue { i1, i64 } %"26_023", 1
  store i64 %38, i64* %"028", align 4
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %36
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, { i32, i8* }* %"33_0", align 8
  %"33_026" = load { i32, i8* }, { i32, i8* }* %"33_0", align 8
  %39 = extractvalue { i32, i8* } %"33_026", 0
  %40 = extractvalue { i32, i8* } %"33_026", 1
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %39, i8* %40)
  call void @abort()
  store i64 0, i64* %"34_0", align 4
  %"34_027" = load i64, i64* %"34_0", align 4
  store i64 %"34_027", i64* %"024", align 4
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %37
  %"029" = load i64, i64* %"028", align 4
  store i64 %"029", i64* %"36_0", align 4
  %"36_030" = load i64, i64* %"36_0", align 4
  store i64 %"36_030", i64* %"024", align 4
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"025" = load i64, i64* %"024", align 4
  store i64 %"025", i64* %"28_0", align 4
  %"16_031" = load [2 x i64], [2 x i64]* %"16_0", align 4
  %"10_032" = load i64, i64* %"10_0", align 4
  %"28_033" = load i64, i64* %"28_0", align 4
  %42 = icmp ult i64 %"10_032", 2
  br i1 %42, label %46, label %43

43:                                               ; preds = %cond_exit_28
  %44 = insertvalue { i1, i64, [2 x i64] } { i1 false, i64 poison, [2 x i64] poison }, i64 %"28_033", 1
  %45 = insertvalue { i1, i64, [2 x i64] } %44, [2 x i64] %"16_031", 2
  store { i1, i64, [2 x i64] } %45, { i1, i64, [2 x i64] }* %"034", align 4
  br label %55

46:                                               ; preds = %cond_exit_28
  %47 = alloca i64, i32 2, align 8
  %48 = bitcast i64* %47 to [2 x i64]*
  store [2 x i64] %"16_031", [2 x i64]* %48, align 4
  %49 = getelementptr inbounds i64, i64* %47, i64 %"10_032"
  %50 = load i64, i64* %49, align 4
  store i64 %"28_033", i64* %49, align 4
  %51 = bitcast i64* %47 to [2 x i64]*
  %52 = load [2 x i64], [2 x i64]* %51, align 4
  %53 = insertvalue { i1, i64, [2 x i64] } { i1 true, i64 poison, [2 x i64] poison }, i64 %50, 1
  %54 = insertvalue { i1, i64, [2 x i64] } %53, [2 x i64] %52, 2
  store { i1, i64, [2 x i64] } %54, { i1, i64, [2 x i64] }* %"034", align 4
  br label %55

55:                                               ; preds = %43, %46
  %"035" = load { i1, i64, [2 x i64] }, { i1, i64, [2 x i64] }* %"034", align 4
  store { i1, i64, [2 x i64] } %"035", { i1, i64, [2 x i64] }* %"38_0", align 4
  %"38_036" = load { i1, i64, [2 x i64] }, { i1, i64, [2 x i64] }* %"38_0", align 4
  %56 = extractvalue { i1, i64, [2 x i64] } %"38_036", 0
  switch i1 %56, label %57 [
    i1 true, label %60
  ]

57:                                               ; preds = %55
  %58 = extractvalue { i1, i64, [2 x i64] } %"38_036", 1
  %59 = extractvalue { i1, i64, [2 x i64] } %"38_036", 2
  store i64 %58, i64* %"041", align 4
  store [2 x i64] %59, [2 x i64]* %"142", align 4
  br label %cond_40_case_0

60:                                               ; preds = %55
  %61 = extractvalue { i1, i64, [2 x i64] } %"38_036", 1
  %62 = extractvalue { i1, i64, [2 x i64] } %"38_036", 2
  store i64 %61, i64* %"050", align 4
  store [2 x i64] %62, [2 x i64]* %"151", align 4
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %57
  %"043" = load i64, i64* %"041", align 4
  %"144" = load [2 x i64], [2 x i64]* %"142", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, { i32, i8* }* %"45_0", align 8
  store i64 %"043", i64* %"42_0", align 4
  store [2 x i64] %"144", [2 x i64]* %"42_1", align 4
  %"45_045" = load { i32, i8* }, { i32, i8* }* %"45_0", align 8
  %"42_046" = load i64, i64* %"42_0", align 4
  %"42_147" = load [2 x i64], [2 x i64]* %"42_1", align 4
  %63 = extractvalue { i32, i8* } %"45_045", 0
  %64 = extractvalue { i32, i8* } %"45_045", 1
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %63, i8* %64)
  call void @abort()
  store i64 0, i64* %"46_0", align 4
  store [2 x i64] zeroinitializer, [2 x i64]* %"46_1", align 4
  %"46_048" = load i64, i64* %"46_0", align 4
  %"46_149" = load [2 x i64], [2 x i64]* %"46_1", align 4
  store i64 %"46_048", i64* %"037", align 4
  store [2 x i64] %"46_149", [2 x i64]* %"138", align 4
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %60
  %"052" = load i64, i64* %"050", align 4
  %"153" = load [2 x i64], [2 x i64]* %"151", align 4
  store i64 %"052", i64* %"48_0", align 4
  store [2 x i64] %"153", [2 x i64]* %"48_1", align 4
  %"48_054" = load i64, i64* %"48_0", align 4
  %"48_155" = load [2 x i64], [2 x i64]* %"48_1", align 4
  store i64 %"48_054", i64* %"037", align 4
  store [2 x i64] %"48_155", [2 x i64]* %"138", align 4
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"039" = load i64, i64* %"037", align 4
  %"140" = load [2 x i64], [2 x i64]* %"138", align 4
  store i64 %"039", i64* %"40_0", align 4
  store [2 x i64] %"140", [2 x i64]* %"40_1", align 4
  %"40_156" = load [2 x i64], [2 x i64]* %"40_1", align 4
  %66 = alloca i64, i32 2, align 8
  %67 = bitcast i64* %66 to [2 x i64]*
  store [2 x i64] %"40_156", [2 x i64]* %67, align 4
  %68 = getelementptr i64, i64* %66, i32 1
  %69 = load i64, i64* %66, align 4
  %70 = bitcast i64* %68 to [1 x i64]*
  %71 = load [1 x i64], [1 x i64]* %70, align 4
  %72 = insertvalue { i1, i64, [1 x i64] } { i1 true, i64 poison, [1 x i64] poison }, i64 %69, 1
  %73 = insertvalue { i1, i64, [1 x i64] } %72, [1 x i64] %71, 2
  store { i1, i64, [1 x i64] } %73, { i1, i64, [1 x i64] }* %"50_0", align 4
  %"50_057" = load { i1, i64, [1 x i64] }, { i1, i64, [1 x i64] }* %"50_0", align 4
  %74 = extractvalue { i1, i64, [1 x i64] } %"50_057", 0
  switch i1 %74, label %75 [
    i1 true, label %76
  ]

75:                                               ; preds = %cond_exit_40
  br label %cond_51_case_0

76:                                               ; preds = %cond_exit_40
  %77 = extractvalue { i1, i64, [1 x i64] } %"50_057", 1
  %78 = extractvalue { i1, i64, [1 x i64] } %"50_057", 2
  store i64 %77, i64* %"065", align 4
  store [1 x i64] %78, [1 x i64]* %"166", align 4
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %75
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, { i32, i8* }* %"56_0", align 8
  %"56_062" = load { i32, i8* }, { i32, i8* }* %"56_0", align 8
  %79 = extractvalue { i32, i8* } %"56_062", 0
  %80 = extractvalue { i32, i8* } %"56_062", 1
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %79, i8* %80)
  call void @abort()
  store i64 0, i64* %"57_0", align 4
  store [1 x i64] zeroinitializer, [1 x i64]* %"57_1", align 4
  %"57_063" = load i64, i64* %"57_0", align 4
  %"57_164" = load [1 x i64], [1 x i64]* %"57_1", align 4
  store i64 %"57_063", i64* %"058", align 4
  store [1 x i64] %"57_164", [1 x i64]* %"159", align 4
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %76
  %"067" = load i64, i64* %"065", align 4
  %"168" = load [1 x i64], [1 x i64]* %"166", align 4
  store i64 %"067", i64* %"59_0", align 4
  store [1 x i64] %"168", [1 x i64]* %"59_1", align 4
  %"59_069" = load i64, i64* %"59_0", align 4
  %"59_170" = load [1 x i64], [1 x i64]* %"59_1", align 4
  store i64 %"59_069", i64* %"058", align 4
  store [1 x i64] %"59_170", [1 x i64]* %"159", align 4
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"060" = load i64, i64* %"058", align 4
  %"161" = load [1 x i64], [1 x i64]* %"159", align 4
  store i64 %"060", i64* %"51_0", align 4
  store [1 x i64] %"161", [1 x i64]* %"51_1", align 4
  %"51_171" = load [1 x i64], [1 x i64]* %"51_1", align 4
  %82 = alloca i64, align 8
  %83 = bitcast i64* %82 to [1 x i64]*
  store [1 x i64] %"51_171", [1 x i64]* %83, align 4
  %84 = getelementptr i64, i64* %82, i32 0
  %85 = load i64, i64* %84, align 4
  %86 = bitcast i64* %82 to [0 x i64]*
  %87 = load [0 x i64], [0 x i64]* %86, align 4
  %88 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %85, 1
  store { i1, i64 } %88, { i1, i64 }* %"61_0", align 4
  %"61_072" = load { i1, i64 }, { i1, i64 }* %"61_0", align 4
  %89 = extractvalue { i1, i64 } %"61_072", 0
  switch i1 %89, label %90 [
    i1 true, label %91
  ]

90:                                               ; preds = %cond_exit_51
  br label %cond_62_case_0

91:                                               ; preds = %cond_exit_51
  %92 = extractvalue { i1, i64 } %"61_072", 1
  store i64 %92, i64* %"080", align 4
  store [0 x i64] undef, [0 x i64]* %"181", align 4
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %90
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, { i32, i8* }* %"67_0", align 8
  %"67_077" = load { i32, i8* }, { i32, i8* }* %"67_0", align 8
  %93 = extractvalue { i32, i8* } %"67_077", 0
  %94 = extractvalue { i32, i8* } %"67_077", 1
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %93, i8* %94)
  call void @abort()
  store i64 0, i64* %"68_0", align 4
  store [0 x i64] zeroinitializer, [0 x i64]* %"68_1", align 4
  %"68_078" = load i64, i64* %"68_0", align 4
  %"68_179" = load [0 x i64], [0 x i64]* %"68_1", align 4
  store i64 %"68_078", i64* %"073", align 4
  store [0 x i64] %"68_179", [0 x i64]* %"174", align 4
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %91
  %"082" = load i64, i64* %"080", align 4
  %"183" = load [0 x i64], [0 x i64]* %"181", align 4
  store i64 %"082", i64* %"70_0", align 4
  store [0 x i64] %"183", [0 x i64]* %"70_1", align 4
  %"70_084" = load i64, i64* %"70_0", align 4
  %"70_185" = load [0 x i64], [0 x i64]* %"70_1", align 4
  store i64 %"70_084", i64* %"073", align 4
  store [0 x i64] %"70_185", [0 x i64]* %"174", align 4
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"075" = load i64, i64* %"073", align 4
  %"176" = load [0 x i64], [0 x i64]* %"174", align 4
  store i64 %"075", i64* %"62_0", align 4
  store [0 x i64] %"176", [0 x i64]* %"62_1", align 4
  %"62_186" = load [0 x i64], [0 x i64]* %"62_1", align 4
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
