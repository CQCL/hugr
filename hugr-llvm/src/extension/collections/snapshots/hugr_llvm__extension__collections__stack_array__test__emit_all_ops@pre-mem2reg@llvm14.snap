---
source: hugr-llvm/src/extension/collections/stack_array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define private void @_hl.main.1() {
alloca_block:
  %"12_0" = alloca i64, align 8
  %"10_0" = alloca i64, align 8
  %"15_0" = alloca [2 x i64], align 8
  %"13_0" = alloca [2 x i64], align 8
  %"14_0" = alloca i64, align 8
  %"14_1" = alloca i64, align 8
  %"8_0" = alloca i64, align 8
  %"18_0" = alloca { i1, [2 x i64] }, align 8
  %"0" = alloca { i1, [2 x i64] }, align 8
  %"19_0" = alloca [2 x i64], align 8
  %"012" = alloca [2 x i64], align 8
  %"014" = alloca [2 x i64], align 8
  %"24_0" = alloca { i32, i8* }, align 8
  %"21_0" = alloca [2 x i64], align 8
  %"25_0" = alloca [2 x i64], align 8
  %"019" = alloca [2 x i64], align 8
  %"27_0" = alloca [2 x i64], align 8
  %"29_0" = alloca { i1, i64 }, align 8
  %"29_1" = alloca [2 x i64], align 8
  %"024" = alloca { i1, i64 }, align 8
  %"1" = alloca [2 x i64], align 8
  %"31_0" = alloca i64, align 8
  %"028" = alloca i64, align 8
  %"36_0" = alloca { i32, i8* }, align 8
  %"37_0" = alloca i64, align 8
  %"032" = alloca i64, align 8
  %"39_0" = alloca i64, align 8
  %"41_0" = alloca { i1, i64, [2 x i64] }, align 8
  %"038" = alloca { i1, i64, [2 x i64] }, align 8
  %"42_0" = alloca i64, align 8
  %"42_1" = alloca [2 x i64], align 8
  %"041" = alloca i64, align 8
  %"142" = alloca [2 x i64], align 8
  %"045" = alloca i64, align 8
  %"146" = alloca [2 x i64], align 8
  %"47_0" = alloca { i32, i8* }, align 8
  %"44_0" = alloca i64, align 8
  %"44_1" = alloca [2 x i64], align 8
  %"48_0" = alloca i64, align 8
  %"48_1" = alloca [2 x i64], align 8
  %"054" = alloca i64, align 8
  %"155" = alloca [2 x i64], align 8
  %"50_0" = alloca i64, align 8
  %"50_1" = alloca [2 x i64], align 8
  %"52_0" = alloca { i1, i64, [1 x i64] }, align 8
  %"53_0" = alloca i64, align 8
  %"53_1" = alloca [1 x i64], align 8
  %"062" = alloca i64, align 8
  %"163" = alloca [1 x i64], align 8
  %"58_0" = alloca { i32, i8* }, align 8
  %"59_0" = alloca i64, align 8
  %"59_1" = alloca [1 x i64], align 8
  %"069" = alloca i64, align 8
  %"170" = alloca [1 x i64], align 8
  %"61_0" = alloca i64, align 8
  %"61_1" = alloca [1 x i64], align 8
  %"63_0" = alloca { i1, i64 }, align 8
  %"64_0" = alloca i64, align 8
  %"64_1" = alloca [0 x i64], align 8
  %"077" = alloca i64, align 8
  %"178" = alloca [0 x i64], align 8
  %"69_0" = alloca { i32, i8* }, align 8
  %"70_0" = alloca i64, align 8
  %"70_1" = alloca [0 x i64], align 8
  %"084" = alloca i64, align 8
  %"185" = alloca [0 x i64], align 8
  %"72_0" = alloca i64, align 8
  %"72_1" = alloca [0 x i64], align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 2, i64* %"12_0", align 4
  store i64 1, i64* %"10_0", align 4
  %"10_01" = load i64, i64* %"10_0", align 4
  %"12_02" = load i64, i64* %"12_0", align 4
  %0 = insertvalue [2 x i64] undef, i64 %"10_01", 0
  %1 = insertvalue [2 x i64] %0, i64 %"12_02", 1
  store [2 x i64] %1, [2 x i64]* %"15_0", align 4
  %"10_03" = load i64, i64* %"10_0", align 4
  %"12_04" = load i64, i64* %"12_0", align 4
  %2 = insertvalue [2 x i64] undef, i64 %"10_03", 0
  %3 = insertvalue [2 x i64] %2, i64 %"12_04", 1
  store [2 x i64] %3, [2 x i64]* %"13_0", align 4
  %"13_05" = load [2 x i64], [2 x i64]* %"13_0", align 4
  %extract = extractvalue [2 x i64] %"13_05", 0
  %extract6 = extractvalue [2 x i64] %"13_05", 1
  store i64 %extract, i64* %"14_0", align 4
  store i64 %extract6, i64* %"14_1", align 4
  store i64 0, i64* %"8_0", align 4
  %"15_07" = load [2 x i64], [2 x i64]* %"15_0", align 4
  %"8_08" = load i64, i64* %"8_0", align 4
  %"10_09" = load i64, i64* %"10_0", align 4
  %4 = icmp ult i64 %"8_08", 2
  %5 = icmp ult i64 %"10_09", 2
  %6 = and i1 %4, %5
  br i1 %6, label %9, label %7

7:                                                ; preds = %entry_block
  %8 = insertvalue { i1, [2 x i64] } { i1 false, [2 x i64] poison }, [2 x i64] %"15_07", 1
  store { i1, [2 x i64] } %8, { i1, [2 x i64] }* %"0", align 4
  br label %19

9:                                                ; preds = %entry_block
  %10 = alloca i64, i32 2, align 8
  %11 = bitcast i64* %10 to [2 x i64]*
  store [2 x i64] %"15_07", [2 x i64]* %11, align 4
  %12 = getelementptr inbounds i64, i64* %10, i64 %"8_08"
  %13 = load i64, i64* %12, align 4
  %14 = getelementptr inbounds i64, i64* %10, i64 %"10_09"
  %15 = load i64, i64* %14, align 4
  store i64 %15, i64* %12, align 4
  store i64 %13, i64* %14, align 4
  %16 = bitcast i64* %10 to [2 x i64]*
  %17 = load [2 x i64], [2 x i64]* %16, align 4
  %18 = insertvalue { i1, [2 x i64] } { i1 true, [2 x i64] poison }, [2 x i64] %17, 1
  store { i1, [2 x i64] } %18, { i1, [2 x i64] }* %"0", align 4
  br label %19

19:                                               ; preds = %7, %9
  %"010" = load { i1, [2 x i64] }, { i1, [2 x i64] }* %"0", align 4
  store { i1, [2 x i64] } %"010", { i1, [2 x i64] }* %"18_0", align 4
  %"18_011" = load { i1, [2 x i64] }, { i1, [2 x i64] }* %"18_0", align 4
  %20 = extractvalue { i1, [2 x i64] } %"18_011", 0
  switch i1 %20, label %21 [
    i1 true, label %23
  ]

21:                                               ; preds = %19
  %22 = extractvalue { i1, [2 x i64] } %"18_011", 1
  store [2 x i64] %22, [2 x i64]* %"014", align 4
  br label %cond_19_case_0

23:                                               ; preds = %19
  %24 = extractvalue { i1, [2 x i64] } %"18_011", 1
  store [2 x i64] %24, [2 x i64]* %"019", align 4
  br label %cond_19_case_1

cond_19_case_0:                                   ; preds = %21
  %"015" = load [2 x i64], [2 x i64]* %"014", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, { i32, i8* }* %"24_0", align 8
  store [2 x i64] %"015", [2 x i64]* %"21_0", align 4
  %"24_016" = load { i32, i8* }, { i32, i8* }* %"24_0", align 8
  %"21_017" = load [2 x i64], [2 x i64]* %"21_0", align 4
  %25 = extractvalue { i32, i8* } %"24_016", 0
  %26 = extractvalue { i32, i8* } %"24_016", 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  store [2 x i64] zeroinitializer, [2 x i64]* %"25_0", align 4
  %"25_018" = load [2 x i64], [2 x i64]* %"25_0", align 4
  store [2 x i64] %"25_018", [2 x i64]* %"012", align 4
  br label %cond_exit_19

cond_19_case_1:                                   ; preds = %23
  %"020" = load [2 x i64], [2 x i64]* %"019", align 4
  store [2 x i64] %"020", [2 x i64]* %"27_0", align 4
  %"27_021" = load [2 x i64], [2 x i64]* %"27_0", align 4
  store [2 x i64] %"27_021", [2 x i64]* %"012", align 4
  br label %cond_exit_19

cond_exit_19:                                     ; preds = %cond_19_case_1, %cond_19_case_0
  %"013" = load [2 x i64], [2 x i64]* %"012", align 4
  store [2 x i64] %"013", [2 x i64]* %"19_0", align 4
  %"19_022" = load [2 x i64], [2 x i64]* %"19_0", align 4
  %"8_023" = load i64, i64* %"8_0", align 4
  %28 = icmp ult i64 %"8_023", 2
  br i1 %28, label %30, label %29

29:                                               ; preds = %cond_exit_19
  store { i1, i64 } { i1 false, i64 poison }, { i1, i64 }* %"024", align 4
  store [2 x i64] %"19_022", [2 x i64]* %"1", align 4
  br label %36

30:                                               ; preds = %cond_exit_19
  %31 = alloca i64, i32 2, align 8
  %32 = bitcast i64* %31 to [2 x i64]*
  store [2 x i64] %"19_022", [2 x i64]* %32, align 4
  %33 = getelementptr inbounds i64, i64* %31, i64 %"8_023"
  %34 = load i64, i64* %33, align 4
  %35 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %34, 1
  store { i1, i64 } %35, { i1, i64 }* %"024", align 4
  store [2 x i64] %"19_022", [2 x i64]* %"1", align 4
  br label %36

36:                                               ; preds = %29, %30
  %"025" = load { i1, i64 }, { i1, i64 }* %"024", align 4
  %"126" = load [2 x i64], [2 x i64]* %"1", align 4
  store { i1, i64 } %"025", { i1, i64 }* %"29_0", align 4
  store [2 x i64] %"126", [2 x i64]* %"29_1", align 4
  %"29_027" = load { i1, i64 }, { i1, i64 }* %"29_0", align 4
  %37 = extractvalue { i1, i64 } %"29_027", 0
  switch i1 %37, label %38 [
    i1 true, label %39
  ]

38:                                               ; preds = %36
  br label %cond_31_case_0

39:                                               ; preds = %36
  %40 = extractvalue { i1, i64 } %"29_027", 1
  store i64 %40, i64* %"032", align 4
  br label %cond_31_case_1

cond_31_case_0:                                   ; preds = %38
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, { i32, i8* }* %"36_0", align 8
  %"36_030" = load { i32, i8* }, { i32, i8* }* %"36_0", align 8
  %41 = extractvalue { i32, i8* } %"36_030", 0
  %42 = extractvalue { i32, i8* } %"36_030", 1
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %41, i8* %42)
  call void @abort()
  store i64 0, i64* %"37_0", align 4
  %"37_031" = load i64, i64* %"37_0", align 4
  store i64 %"37_031", i64* %"028", align 4
  br label %cond_exit_31

cond_31_case_1:                                   ; preds = %39
  %"033" = load i64, i64* %"032", align 4
  store i64 %"033", i64* %"39_0", align 4
  %"39_034" = load i64, i64* %"39_0", align 4
  store i64 %"39_034", i64* %"028", align 4
  br label %cond_exit_31

cond_exit_31:                                     ; preds = %cond_31_case_1, %cond_31_case_0
  %"029" = load i64, i64* %"028", align 4
  store i64 %"029", i64* %"31_0", align 4
  %"29_135" = load [2 x i64], [2 x i64]* %"29_1", align 4
  %"10_036" = load i64, i64* %"10_0", align 4
  %"31_037" = load i64, i64* %"31_0", align 4
  %44 = icmp ult i64 %"10_036", 2
  br i1 %44, label %48, label %45

45:                                               ; preds = %cond_exit_31
  %46 = insertvalue { i1, i64, [2 x i64] } { i1 false, i64 poison, [2 x i64] poison }, i64 %"31_037", 1
  %47 = insertvalue { i1, i64, [2 x i64] } %46, [2 x i64] %"29_135", 2
  store { i1, i64, [2 x i64] } %47, { i1, i64, [2 x i64] }* %"038", align 4
  br label %57

48:                                               ; preds = %cond_exit_31
  %49 = alloca i64, i32 2, align 8
  %50 = bitcast i64* %49 to [2 x i64]*
  store [2 x i64] %"29_135", [2 x i64]* %50, align 4
  %51 = getelementptr inbounds i64, i64* %49, i64 %"10_036"
  %52 = load i64, i64* %51, align 4
  store i64 %"31_037", i64* %51, align 4
  %53 = bitcast i64* %49 to [2 x i64]*
  %54 = load [2 x i64], [2 x i64]* %53, align 4
  %55 = insertvalue { i1, i64, [2 x i64] } { i1 true, i64 poison, [2 x i64] poison }, i64 %52, 1
  %56 = insertvalue { i1, i64, [2 x i64] } %55, [2 x i64] %54, 2
  store { i1, i64, [2 x i64] } %56, { i1, i64, [2 x i64] }* %"038", align 4
  br label %57

57:                                               ; preds = %45, %48
  %"039" = load { i1, i64, [2 x i64] }, { i1, i64, [2 x i64] }* %"038", align 4
  store { i1, i64, [2 x i64] } %"039", { i1, i64, [2 x i64] }* %"41_0", align 4
  %"41_040" = load { i1, i64, [2 x i64] }, { i1, i64, [2 x i64] }* %"41_0", align 4
  %58 = extractvalue { i1, i64, [2 x i64] } %"41_040", 0
  switch i1 %58, label %59 [
    i1 true, label %62
  ]

59:                                               ; preds = %57
  %60 = extractvalue { i1, i64, [2 x i64] } %"41_040", 1
  %61 = extractvalue { i1, i64, [2 x i64] } %"41_040", 2
  store i64 %60, i64* %"045", align 4
  store [2 x i64] %61, [2 x i64]* %"146", align 4
  br label %cond_42_case_0

62:                                               ; preds = %57
  %63 = extractvalue { i1, i64, [2 x i64] } %"41_040", 1
  %64 = extractvalue { i1, i64, [2 x i64] } %"41_040", 2
  store i64 %63, i64* %"054", align 4
  store [2 x i64] %64, [2 x i64]* %"155", align 4
  br label %cond_42_case_1

cond_42_case_0:                                   ; preds = %59
  %"047" = load i64, i64* %"045", align 4
  %"148" = load [2 x i64], [2 x i64]* %"146", align 4
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, { i32, i8* }* %"47_0", align 8
  store i64 %"047", i64* %"44_0", align 4
  store [2 x i64] %"148", [2 x i64]* %"44_1", align 4
  %"47_049" = load { i32, i8* }, { i32, i8* }* %"47_0", align 8
  %"44_050" = load i64, i64* %"44_0", align 4
  %"44_151" = load [2 x i64], [2 x i64]* %"44_1", align 4
  %65 = extractvalue { i32, i8* } %"47_049", 0
  %66 = extractvalue { i32, i8* } %"47_049", 1
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %65, i8* %66)
  call void @abort()
  store i64 0, i64* %"48_0", align 4
  store [2 x i64] zeroinitializer, [2 x i64]* %"48_1", align 4
  %"48_052" = load i64, i64* %"48_0", align 4
  %"48_153" = load [2 x i64], [2 x i64]* %"48_1", align 4
  store i64 %"48_052", i64* %"041", align 4
  store [2 x i64] %"48_153", [2 x i64]* %"142", align 4
  br label %cond_exit_42

cond_42_case_1:                                   ; preds = %62
  %"056" = load i64, i64* %"054", align 4
  %"157" = load [2 x i64], [2 x i64]* %"155", align 4
  store i64 %"056", i64* %"50_0", align 4
  store [2 x i64] %"157", [2 x i64]* %"50_1", align 4
  %"50_058" = load i64, i64* %"50_0", align 4
  %"50_159" = load [2 x i64], [2 x i64]* %"50_1", align 4
  store i64 %"50_058", i64* %"041", align 4
  store [2 x i64] %"50_159", [2 x i64]* %"142", align 4
  br label %cond_exit_42

cond_exit_42:                                     ; preds = %cond_42_case_1, %cond_42_case_0
  %"043" = load i64, i64* %"041", align 4
  %"144" = load [2 x i64], [2 x i64]* %"142", align 4
  store i64 %"043", i64* %"42_0", align 4
  store [2 x i64] %"144", [2 x i64]* %"42_1", align 4
  %"42_160" = load [2 x i64], [2 x i64]* %"42_1", align 4
  %68 = alloca i64, i32 2, align 8
  %69 = bitcast i64* %68 to [2 x i64]*
  store [2 x i64] %"42_160", [2 x i64]* %69, align 4
  %70 = getelementptr i64, i64* %68, i32 1
  %71 = load i64, i64* %68, align 4
  %72 = bitcast i64* %70 to [1 x i64]*
  %73 = load [1 x i64], [1 x i64]* %72, align 4
  %74 = insertvalue { i1, i64, [1 x i64] } { i1 true, i64 poison, [1 x i64] poison }, i64 %71, 1
  %75 = insertvalue { i1, i64, [1 x i64] } %74, [1 x i64] %73, 2
  store { i1, i64, [1 x i64] } %75, { i1, i64, [1 x i64] }* %"52_0", align 4
  %"52_061" = load { i1, i64, [1 x i64] }, { i1, i64, [1 x i64] }* %"52_0", align 4
  %76 = extractvalue { i1, i64, [1 x i64] } %"52_061", 0
  switch i1 %76, label %77 [
    i1 true, label %78
  ]

77:                                               ; preds = %cond_exit_42
  br label %cond_53_case_0

78:                                               ; preds = %cond_exit_42
  %79 = extractvalue { i1, i64, [1 x i64] } %"52_061", 1
  %80 = extractvalue { i1, i64, [1 x i64] } %"52_061", 2
  store i64 %79, i64* %"069", align 4
  store [1 x i64] %80, [1 x i64]* %"170", align 4
  br label %cond_53_case_1

cond_53_case_0:                                   ; preds = %77
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, { i32, i8* }* %"58_0", align 8
  %"58_066" = load { i32, i8* }, { i32, i8* }* %"58_0", align 8
  %81 = extractvalue { i32, i8* } %"58_066", 0
  %82 = extractvalue { i32, i8* } %"58_066", 1
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %81, i8* %82)
  call void @abort()
  store i64 0, i64* %"59_0", align 4
  store [1 x i64] zeroinitializer, [1 x i64]* %"59_1", align 4
  %"59_067" = load i64, i64* %"59_0", align 4
  %"59_168" = load [1 x i64], [1 x i64]* %"59_1", align 4
  store i64 %"59_067", i64* %"062", align 4
  store [1 x i64] %"59_168", [1 x i64]* %"163", align 4
  br label %cond_exit_53

cond_53_case_1:                                   ; preds = %78
  %"071" = load i64, i64* %"069", align 4
  %"172" = load [1 x i64], [1 x i64]* %"170", align 4
  store i64 %"071", i64* %"61_0", align 4
  store [1 x i64] %"172", [1 x i64]* %"61_1", align 4
  %"61_073" = load i64, i64* %"61_0", align 4
  %"61_174" = load [1 x i64], [1 x i64]* %"61_1", align 4
  store i64 %"61_073", i64* %"062", align 4
  store [1 x i64] %"61_174", [1 x i64]* %"163", align 4
  br label %cond_exit_53

cond_exit_53:                                     ; preds = %cond_53_case_1, %cond_53_case_0
  %"064" = load i64, i64* %"062", align 4
  %"165" = load [1 x i64], [1 x i64]* %"163", align 4
  store i64 %"064", i64* %"53_0", align 4
  store [1 x i64] %"165", [1 x i64]* %"53_1", align 4
  %"53_175" = load [1 x i64], [1 x i64]* %"53_1", align 4
  %84 = alloca i64, align 8
  %85 = bitcast i64* %84 to [1 x i64]*
  store [1 x i64] %"53_175", [1 x i64]* %85, align 4
  %86 = getelementptr i64, i64* %84, i32 0
  %87 = load i64, i64* %86, align 4
  %88 = bitcast i64* %84 to [0 x i64]*
  %89 = load [0 x i64], [0 x i64]* %88, align 4
  %90 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %87, 1
  store { i1, i64 } %90, { i1, i64 }* %"63_0", align 4
  %"63_076" = load { i1, i64 }, { i1, i64 }* %"63_0", align 4
  %91 = extractvalue { i1, i64 } %"63_076", 0
  switch i1 %91, label %92 [
    i1 true, label %93
  ]

92:                                               ; preds = %cond_exit_53
  br label %cond_64_case_0

93:                                               ; preds = %cond_exit_53
  %94 = extractvalue { i1, i64 } %"63_076", 1
  store i64 %94, i64* %"084", align 4
  store [0 x i64] undef, [0 x i64]* %"185", align 4
  br label %cond_64_case_1

cond_64_case_0:                                   ; preds = %92
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, { i32, i8* }* %"69_0", align 8
  %"69_081" = load { i32, i8* }, { i32, i8* }* %"69_0", align 8
  %95 = extractvalue { i32, i8* } %"69_081", 0
  %96 = extractvalue { i32, i8* } %"69_081", 1
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %95, i8* %96)
  call void @abort()
  store i64 0, i64* %"70_0", align 4
  store [0 x i64] zeroinitializer, [0 x i64]* %"70_1", align 4
  %"70_082" = load i64, i64* %"70_0", align 4
  %"70_183" = load [0 x i64], [0 x i64]* %"70_1", align 4
  store i64 %"70_082", i64* %"077", align 4
  store [0 x i64] %"70_183", [0 x i64]* %"178", align 4
  br label %cond_exit_64

cond_64_case_1:                                   ; preds = %93
  %"086" = load i64, i64* %"084", align 4
  %"187" = load [0 x i64], [0 x i64]* %"185", align 4
  store i64 %"086", i64* %"72_0", align 4
  store [0 x i64] %"187", [0 x i64]* %"72_1", align 4
  %"72_088" = load i64, i64* %"72_0", align 4
  %"72_189" = load [0 x i64], [0 x i64]* %"72_1", align 4
  store i64 %"72_088", i64* %"077", align 4
  store [0 x i64] %"72_189", [0 x i64]* %"178", align 4
  br label %cond_exit_64

cond_exit_64:                                     ; preds = %cond_64_case_1, %cond_64_case_0
  %"079" = load i64, i64* %"077", align 4
  %"180" = load [0 x i64], [0 x i64]* %"178", align 4
  store i64 %"079", i64* %"64_0", align 4
  store [0 x i64] %"180", [0 x i64]* %"64_1", align 4
  %"64_190" = load [0 x i64], [0 x i64]* %"64_1", align 4
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
