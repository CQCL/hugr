---
source: hugr-llvm/src/extension/collections/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %0 = insertvalue [2 x i64] undef, i64 1, 0
  %1 = insertvalue [2 x i64] %0, i64 2, 1
  %2 = icmp ult i64 0, 2
  %3 = icmp ult i64 1, 2
  %4 = and i1 %2, %3
  br i1 %4, label %7, label %5

5:                                                ; preds = %entry_block
  %6 = insertvalue { i1, [2 x i64] } { i1 false, [2 x i64] poison }, [2 x i64] %1, 1
  br label %17

7:                                                ; preds = %entry_block
  %8 = alloca i64, i32 2, align 8
  %9 = bitcast i64* %8 to [2 x i64]*
  store [2 x i64] %1, [2 x i64]* %9, align 4
  %10 = getelementptr inbounds i64, i64* %8, i64 0
  %11 = load i64, i64* %10, align 4
  %12 = getelementptr inbounds i64, i64* %8, i64 1
  %13 = load i64, i64* %12, align 4
  store i64 %13, i64* %10, align 4
  store i64 %11, i64* %12, align 4
  %14 = bitcast i64* %8 to [2 x i64]*
  %15 = load [2 x i64], [2 x i64]* %14, align 4
  %16 = insertvalue { i1, [2 x i64] } { i1 true, [2 x i64] poison }, [2 x i64] %15, 1
  br label %17

17:                                               ; preds = %5, %7
  %"0.0" = phi { i1, [2 x i64] } [ %16, %7 ], [ %6, %5 ]
  %18 = extractvalue { i1, [2 x i64] } %"0.0", 0
  switch i1 %18, label %19 [
    i1 true, label %21
  ]

19:                                               ; preds = %17
  %20 = extractvalue { i1, [2 x i64] } %"0.0", 1
  br label %cond_16_case_0

21:                                               ; preds = %17
  %22 = extractvalue { i1, [2 x i64] } %"0.0", 1
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %19
  %23 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %24 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %23, i8* %24)
  call void @abort()
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %21
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"014.0" = phi [2 x i64] [ zeroinitializer, %cond_16_case_0 ], [ %22, %cond_16_case_1 ]
  %26 = icmp ult i64 0, 2
  br i1 %26, label %28, label %27

27:                                               ; preds = %cond_exit_16
  br label %34

28:                                               ; preds = %cond_exit_16
  %29 = alloca i64, i32 2, align 8
  %30 = bitcast i64* %29 to [2 x i64]*
  store [2 x i64] %"014.0", [2 x i64]* %30, align 4
  %31 = getelementptr inbounds i64, i64* %29, i64 0
  %32 = load i64, i64* %31, align 4
  %33 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %32, 1
  br label %34

34:                                               ; preds = %27, %28
  %"030.0" = phi { i1, i64 } [ %33, %28 ], [ { i1 false, i64 poison }, %27 ]
  %35 = extractvalue { i1, i64 } %"030.0", 0
  switch i1 %35, label %36 [
    i1 true, label %37
  ]

36:                                               ; preds = %34
  br label %cond_28_case_0

37:                                               ; preds = %34
  %38 = extractvalue { i1, i64 } %"030.0", 1
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %36
  %39 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %40 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %39, i8* %40)
  call void @abort()
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %37
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"034.0" = phi i64 [ 0, %cond_28_case_0 ], [ %38, %cond_28_case_1 ]
  %42 = icmp ult i64 1, 2
  br i1 %42, label %46, label %43

43:                                               ; preds = %cond_exit_28
  %44 = insertvalue { i1, i64, [2 x i64] } { i1 false, i64 poison, [2 x i64] poison }, i64 %"034.0", 1
  %45 = insertvalue { i1, i64, [2 x i64] } %44, [2 x i64] %"014.0", 2
  br label %55

46:                                               ; preds = %cond_exit_28
  %47 = alloca i64, i32 2, align 8
  %48 = bitcast i64* %47 to [2 x i64]*
  store [2 x i64] %"014.0", [2 x i64]* %48, align 4
  %49 = getelementptr inbounds i64, i64* %47, i64 1
  %50 = load i64, i64* %49, align 4
  store i64 %"034.0", i64* %49, align 4
  %51 = bitcast i64* %47 to [2 x i64]*
  %52 = load [2 x i64], [2 x i64]* %51, align 4
  %53 = insertvalue { i1, i64, [2 x i64] } { i1 true, i64 poison, [2 x i64] poison }, i64 %50, 1
  %54 = insertvalue { i1, i64, [2 x i64] } %53, [2 x i64] %52, 2
  br label %55

55:                                               ; preds = %43, %46
  %"048.0" = phi { i1, i64, [2 x i64] } [ %54, %46 ], [ %45, %43 ]
  %56 = extractvalue { i1, i64, [2 x i64] } %"048.0", 0
  switch i1 %56, label %57 [
    i1 true, label %60
  ]

57:                                               ; preds = %55
  %58 = extractvalue { i1, i64, [2 x i64] } %"048.0", 1
  %59 = extractvalue { i1, i64, [2 x i64] } %"048.0", 2
  br label %cond_40_case_0

60:                                               ; preds = %55
  %61 = extractvalue { i1, i64, [2 x i64] } %"048.0", 1
  %62 = extractvalue { i1, i64, [2 x i64] } %"048.0", 2
  br label %cond_40_case_1

cond_40_case_0:                                   ; preds = %57
  %63 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 0
  %64 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 1
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %63, i8* %64)
  call void @abort()
  br label %cond_exit_40

cond_40_case_1:                                   ; preds = %60
  br label %cond_exit_40

cond_exit_40:                                     ; preds = %cond_40_case_1, %cond_40_case_0
  %"052.0" = phi i64 [ 0, %cond_40_case_0 ], [ %61, %cond_40_case_1 ]
  %"1.0" = phi [2 x i64] [ zeroinitializer, %cond_40_case_0 ], [ %62, %cond_40_case_1 ]
  %66 = alloca i64, i32 2, align 8
  %67 = bitcast i64* %66 to [2 x i64]*
  store [2 x i64] %"1.0", [2 x i64]* %67, align 4
  %68 = getelementptr i64, i64* %66, i32 1
  %69 = load i64, i64* %66, align 4
  %70 = bitcast i64* %68 to [1 x i64]*
  %71 = load [1 x i64], [1 x i64]* %70, align 4
  %72 = insertvalue { i1, i64, [1 x i64] } { i1 true, i64 poison, [1 x i64] poison }, i64 %69, 1
  %73 = insertvalue { i1, i64, [1 x i64] } %72, [1 x i64] %71, 2
  %74 = extractvalue { i1, i64, [1 x i64] } %73, 0
  switch i1 %74, label %75 [
    i1 true, label %76
  ]

75:                                               ; preds = %cond_exit_40
  br label %cond_51_case_0

76:                                               ; preds = %cond_exit_40
  %77 = extractvalue { i1, i64, [1 x i64] } %73, 1
  %78 = extractvalue { i1, i64, [1 x i64] } %73, 2
  br label %cond_51_case_1

cond_51_case_0:                                   ; preds = %75
  %79 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 0
  %80 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 1
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %79, i8* %80)
  call void @abort()
  br label %cond_exit_51

cond_51_case_1:                                   ; preds = %76
  br label %cond_exit_51

cond_exit_51:                                     ; preds = %cond_51_case_1, %cond_51_case_0
  %"077.0" = phi i64 [ 0, %cond_51_case_0 ], [ %77, %cond_51_case_1 ]
  %"178.0" = phi [1 x i64] [ zeroinitializer, %cond_51_case_0 ], [ %78, %cond_51_case_1 ]
  %82 = alloca i64, align 8
  %83 = bitcast i64* %82 to [1 x i64]*
  store [1 x i64] %"178.0", [1 x i64]* %83, align 4
  %84 = getelementptr i64, i64* %82, i32 0
  %85 = load i64, i64* %84, align 4
  %86 = bitcast i64* %82 to [0 x i64]*
  %87 = load [0 x i64], [0 x i64]* %86, align 4
  %88 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %85, 1
  %89 = extractvalue { i1, i64 } %88, 0
  switch i1 %89, label %90 [
    i1 true, label %91
  ]

90:                                               ; preds = %cond_exit_51
  br label %cond_62_case_0

91:                                               ; preds = %cond_exit_51
  %92 = extractvalue { i1, i64 } %88, 1
  br label %cond_62_case_1

cond_62_case_0:                                   ; preds = %90
  %93 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 0
  %94 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 1
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %93, i8* %94)
  call void @abort()
  br label %cond_exit_62

cond_62_case_1:                                   ; preds = %91
  br label %cond_exit_62

cond_exit_62:                                     ; preds = %cond_62_case_1, %cond_62_case_0
  %"095.0" = phi i64 [ 0, %cond_62_case_0 ], [ %92, %cond_62_case_1 ]
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()
