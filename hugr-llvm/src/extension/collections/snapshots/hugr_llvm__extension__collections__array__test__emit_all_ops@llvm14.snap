---
source: hugr-llvm/src/extension/collections/array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %0 = call i8* @malloc(i64 mul (i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64), i64 2))
  %1 = bitcast i8* %0 to i64*
  %2 = insertvalue { i64*, i64 } poison, i64* %1, 0
  %3 = insertvalue { i64*, i64 } %2, i64 0, 1
  %4 = getelementptr inbounds i64, i64* %1, i64 0
  store i64 1, i64* %4, align 4
  %5 = getelementptr inbounds i64, i64* %1, i64 1
  store i64 2, i64* %5, align 4
  %array_ptr = extractvalue { i64*, i64 } %3, 0
  %array_offset = extractvalue { i64*, i64 } %3, 1
  %6 = icmp ult i64 0, 2
  %7 = icmp ult i64 1, 2
  %8 = and i1 %6, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %entry_block
  %10 = insertvalue { i1, { i64*, i64 } } { i1 false, { i64*, i64 } poison }, { i64*, i64 } %3, 1
  br label %19

11:                                               ; preds = %entry_block
  %12 = add i64 0, %array_offset
  %13 = add i64 1, %array_offset
  %14 = getelementptr inbounds i64, i64* %array_ptr, i64 %12
  %15 = load i64, i64* %14, align 4
  %16 = getelementptr inbounds i64, i64* %array_ptr, i64 %13
  %17 = load i64, i64* %16, align 4
  store i64 %17, i64* %14, align 4
  store i64 %15, i64* %16, align 4
  %18 = insertvalue { i1, { i64*, i64 } } { i1 true, { i64*, i64 } poison }, { i64*, i64 } %3, 1
  br label %19

19:                                               ; preds = %9, %11
  %"0.0" = phi { i1, { i64*, i64 } } [ %18, %11 ], [ %10, %9 ]
  %20 = extractvalue { i1, { i64*, i64 } } %"0.0", 0
  switch i1 %20, label %21 [
    i1 true, label %23
  ]

21:                                               ; preds = %19
  %22 = extractvalue { i1, { i64*, i64 } } %"0.0", 1
  br label %cond_16_case_0

23:                                               ; preds = %19
  %24 = extractvalue { i1, { i64*, i64 } } %"0.0", 1
  br label %cond_16_case_1

cond_16_case_0:                                   ; preds = %21
  %25 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %26 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  br label %cond_exit_16

cond_16_case_1:                                   ; preds = %23
  br label %cond_exit_16

cond_exit_16:                                     ; preds = %cond_16_case_1, %cond_16_case_0
  %"08.0" = phi { i64*, i64 } [ zeroinitializer, %cond_16_case_0 ], [ %24, %cond_16_case_1 ]
  %array_ptr20 = extractvalue { i64*, i64 } %"08.0", 0
  %array_offset21 = extractvalue { i64*, i64 } %"08.0", 1
  %28 = icmp ult i64 0, 2
  br i1 %28, label %30, label %29

29:                                               ; preds = %cond_exit_16
  br label %35

30:                                               ; preds = %cond_exit_16
  %31 = add i64 0, %array_offset21
  %32 = getelementptr inbounds i64, i64* %array_ptr20, i64 %31
  %33 = load i64, i64* %32, align 4
  %34 = insertvalue { i1, i64 } { i1 true, i64 poison }, i64 %33, 1
  br label %35

35:                                               ; preds = %29, %30
  %"022.0" = phi { i1, i64 } [ %34, %30 ], [ { i1 false, i64 poison }, %29 ]
  %36 = extractvalue { i1, i64 } %"022.0", 0
  switch i1 %36, label %37 [
    i1 true, label %38
  ]

37:                                               ; preds = %35
  br label %cond_28_case_0

38:                                               ; preds = %35
  %39 = extractvalue { i1, i64 } %"022.0", 1
  br label %cond_28_case_1

cond_28_case_0:                                   ; preds = %37
  %40 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %41 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %40, i8* %41)
  call void @abort()
  br label %cond_exit_28

cond_28_case_1:                                   ; preds = %38
  br label %cond_exit_28

cond_exit_28:                                     ; preds = %cond_28_case_1, %cond_28_case_0
  %"026.0" = phi i64 [ 0, %cond_28_case_0 ], [ %39, %cond_28_case_1 ]
  %array_ptr36 = extractvalue { i64*, i64 } %"08.0", 0
  %array_offset37 = extractvalue { i64*, i64 } %"08.0", 1
  %43 = icmp ult i64 1, 2
  br i1 %43, label %47, label %44

44:                                               ; preds = %cond_exit_28
  %45 = insertvalue { i1, { i64*, i64 }, i64 } { i1 false, { i64*, i64 } poison, i64 poison }, i64 %"026.0", 2
  %46 = insertvalue { i1, { i64*, i64 }, i64 } %45, { i64*, i64 } %"08.0", 1
  br label %53

47:                                               ; preds = %cond_exit_28
  %48 = add i64 1, %array_offset37
  %49 = getelementptr inbounds i64, i64* %array_ptr36, i64 %48
  %50 = load i64, i64* %49, align 4
  store i64 %"026.0", i64* %49, align 4
  %51 = insertvalue { i1, { i64*, i64 }, i64 } { i1 true, { i64*, i64 } poison, i64 poison }, i64 %50, 2
  %52 = insertvalue { i1, { i64*, i64 }, i64 } %51, { i64*, i64 } %"08.0", 1
  br label %53

53:                                               ; preds = %44, %47
  %"038.0" = phi { i1, { i64*, i64 }, i64 } [ %52, %47 ], [ %46, %44 ]
  %54 = extractvalue { i1, { i64*, i64 }, i64 } %"038.0", 0
  switch i1 %54, label %55 [
    i1 true, label %58
  ]

55:                                               ; preds = %53
  %56 = extractvalue { i1, { i64*, i64 }, i64 } %"038.0", 2
  %57 = extractvalue { i1, { i64*, i64 }, i64 } %"038.0", 1
  br label %cond_39_case_0

58:                                               ; preds = %53
  %59 = extractvalue { i1, { i64*, i64 }, i64 } %"038.0", 2
  %60 = extractvalue { i1, { i64*, i64 }, i64 } %"038.0", 1
  br label %cond_39_case_1

cond_39_case_0:                                   ; preds = %55
  %61 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 0
  %62 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0) }, 1
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %61, i8* %62)
  call void @abort()
  br label %cond_exit_39

cond_39_case_1:                                   ; preds = %58
  br label %cond_exit_39

cond_exit_39:                                     ; preds = %cond_39_case_1, %cond_39_case_0
  %"041.0" = phi i64 [ 0, %cond_39_case_0 ], [ %59, %cond_39_case_1 ]
  %"142.0" = phi { i64*, i64 } [ zeroinitializer, %cond_39_case_0 ], [ %60, %cond_39_case_1 ]
  %array_ptr61 = extractvalue { i64*, i64 } %"142.0", 0
  %array_offset62 = extractvalue { i64*, i64 } %"142.0", 1
  %new_offset = add i64 %array_offset62, 1
  %64 = getelementptr inbounds i64, i64* %array_ptr61, i64 %array_offset62
  %65 = load i64, i64* %64, align 4
  %66 = insertvalue { i64*, i64 } poison, i64* %array_ptr61, 0
  %67 = insertvalue { i64*, i64 } %66, i64 %new_offset, 1
  %68 = insertvalue { i1, { i64*, i64 }, i64 } { i1 true, { i64*, i64 } poison, i64 poison }, i64 %65, 2
  %69 = insertvalue { i1, { i64*, i64 }, i64 } %68, { i64*, i64 } %67, 1
  %70 = extractvalue { i1, { i64*, i64 }, i64 } %69, 0
  switch i1 %70, label %71 [
    i1 true, label %72
  ]

71:                                               ; preds = %cond_exit_39
  br label %cond_50_case_0

72:                                               ; preds = %cond_exit_39
  %73 = extractvalue { i1, { i64*, i64 }, i64 } %69, 2
  %74 = extractvalue { i1, { i64*, i64 }, i64 } %69, 1
  br label %cond_50_case_1

cond_50_case_0:                                   ; preds = %71
  %75 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 0
  %76 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @3, i32 0, i32 0) }, 1
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 %75, i8* %76)
  call void @abort()
  br label %cond_exit_50

cond_50_case_1:                                   ; preds = %72
  br label %cond_exit_50

cond_exit_50:                                     ; preds = %cond_50_case_1, %cond_50_case_0
  %"064.0" = phi i64 [ 0, %cond_50_case_0 ], [ %73, %cond_50_case_1 ]
  %"165.0" = phi { i64*, i64 } [ zeroinitializer, %cond_50_case_0 ], [ %74, %cond_50_case_1 ]
  %array_ptr78 = extractvalue { i64*, i64 } %"165.0", 0
  %array_offset79 = extractvalue { i64*, i64 } %"165.0", 1
  %78 = getelementptr inbounds i64, i64* %array_ptr78, i64 0
  %79 = load i64, i64* %78, align 4
  %80 = insertvalue { i64*, i64 } poison, i64* %array_ptr78, 0
  %81 = insertvalue { i64*, i64 } %80, i64 %array_offset79, 1
  %82 = insertvalue { i1, { i64*, i64 }, i64 } { i1 true, { i64*, i64 } poison, i64 poison }, i64 %79, 2
  %83 = insertvalue { i1, { i64*, i64 }, i64 } %82, { i64*, i64 } %81, 1
  %84 = extractvalue { i1, { i64*, i64 }, i64 } %83, 0
  switch i1 %84, label %85 [
    i1 true, label %86
  ]

85:                                               ; preds = %cond_exit_50
  br label %cond_61_case_0

86:                                               ; preds = %cond_exit_50
  %87 = extractvalue { i1, { i64*, i64 }, i64 } %83, 2
  %88 = extractvalue { i1, { i64*, i64 }, i64 } %83, 1
  br label %cond_61_case_1

cond_61_case_0:                                   ; preds = %85
  %89 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 0
  %90 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 1
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 %89, i8* %90)
  call void @abort()
  br label %cond_exit_61

cond_61_case_1:                                   ; preds = %86
  br label %cond_exit_61

cond_exit_61:                                     ; preds = %cond_61_case_1, %cond_61_case_0
  %"081.0" = phi i64 [ 0, %cond_61_case_0 ], [ %87, %cond_61_case_1 ]
  %"182.0" = phi { i64*, i64 } [ zeroinitializer, %cond_61_case_0 ], [ %88, %cond_61_case_1 ]
  %array_ptr95 = extractvalue { i64*, i64 } %"182.0", 0
  %92 = bitcast i64* %array_ptr95 to i8*
  call void @free(i8* %92)
  ret void
}

declare i8* @malloc(i64)

declare i32 @printf(i8*, ...)

declare void @abort()

declare void @free(i8*)
