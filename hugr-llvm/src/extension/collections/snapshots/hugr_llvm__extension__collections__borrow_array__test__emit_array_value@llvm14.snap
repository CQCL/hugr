---
source: hugr-llvm/src/extension/collections/borrow_array.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

define private { i64*, i64*, i64 } @_hl.main.1() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %0 = call i8* @malloc(i64 mul (i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64), i64 2))
  %1 = bitcast i8* %0 to i64*
  %2 = call i8* @malloc(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %3 = bitcast i8* %2 to i64*
  call void @llvm.memset.p0i64.i64(i64* %3, i8 0, i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64), i1 false)
  %4 = insertvalue { i64*, i64*, i64 } poison, i64* %1, 0
  %5 = insertvalue { i64*, i64*, i64 } %4, i64* %3, 1
  %6 = insertvalue { i64*, i64*, i64 } %5, i64 0, 2
  %7 = getelementptr inbounds i64, i64* %1, i32 0
  store i64 1, i64* %7, align 4
  %8 = getelementptr inbounds i64, i64* %1, i32 1
  store i64 2, i64* %8, align 4
  ret { i64*, i64*, i64 } %6
}

declare i8* @malloc(i64)

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i64.i64(i64* nocapture writeonly, i8, i64, i1 immarg) #0

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }
