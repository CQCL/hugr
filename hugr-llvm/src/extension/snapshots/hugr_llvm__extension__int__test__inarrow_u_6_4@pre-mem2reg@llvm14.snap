---
source: hugr-llvm/src/extension/int.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [25 x i8] c"Can't narrow into bounds\00", align 1

define { i1, { i32, i8* }, i16 } @_hl.main.1(i64 %0) {
alloca_block:
  %"0" = alloca { i1, { i32, i8* }, i16 }, align 8
  %"2_0" = alloca i64, align 8
  %"4_0" = alloca { i1, { i32, i8* }, i16 }, align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i64 %0, i64* %"2_0", align 4
  %"2_01" = load i64, i64* %"2_0", align 4
  %upper_bounds_check = icmp ugt i64 %"2_01", 65535
  %1 = trunc i64 %"2_01" to i16
  %2 = insertvalue { i1, { i32, i8* }, i16 } { i1 true, { i32, i8* } poison, i16 poison }, i16 %1, 2
  %3 = select i1 %upper_bounds_check, { i1, { i32, i8* }, i16 } { i1 false, { i32, i8* } { i32 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @0, i32 0, i32 0) }, i16 poison }, { i1, { i32, i8* }, i16 } %2
  store { i1, { i32, i8* }, i16 } %3, { i1, { i32, i8* }, i16 }* %"4_0", align 8
  %"4_02" = load { i1, { i32, i8* }, i16 }, { i1, { i32, i8* }, i16 }* %"4_0", align 8
  store { i1, { i32, i8* }, i16 } %"4_02", { i1, { i32, i8* }, i16 }* %"0", align 8
  %"03" = load { i1, { i32, i8* }, i16 }, { i1, { i32, i8* }, i16 }* %"0", align 8
  ret { i1, { i32, i8* }, i16 } %"03"
}
