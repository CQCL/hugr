---
source: hugr-llvm/src/extension/int.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [24 x i8] c"Attempted division by 0\00", align 1

define { i1, { i32, i8* }, i64 } @_hl.main.1(i64 %0, i64 %1) {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %valid_div = icmp sgt i64 %1, 0
  %quotient = sdiv i64 %0, %1
  %remainder = srem i64 %0, %1
  %2 = insertvalue { i64, i64 } poison, i64 %quotient, 0
  %3 = insertvalue { i64, i64 } %2, i64 %remainder, 1
  %4 = insertvalue { i1, { i64, i64 }, { i32, i8* } } { i1 true, { i64, i64 } poison, { i32, i8* } poison }, { i64, i64 } %3, 1
  %5 = select i1 %valid_div, { i1, { i64, i64 }, { i32, i8* } } %4, { i1, { i64, i64 }, { i32, i8* } } { i1 false, { i64, i64 } poison, { i32, i8* } { i32 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @0, i32 0, i32 0) } }
  %6 = extractvalue { i1, { i64, i64 }, { i32, i8* } } %5, 1
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = extractvalue { i1, { i64, i64 }, { i32, i8* } } %5, 2
  %tag = extractvalue { i1, { i64, i64 }, { i32, i8* } } %5, 0
  %data_variant = insertvalue { i1, { i32, i8* }, i64 } { i1 true, { i32, i8* } poison, i64 poison }, i64 %8, 2
  %err_variant = insertvalue { i1, { i32, i8* }, i64 } { i1 false, { i32, i8* } poison, i64 poison }, { i32, i8* } %9, 1
  %10 = select i1 %tag, { i1, { i32, i8* }, i64 } %data_variant, { i1, { i32, i8* }, i64 } %err_variant
  ret { i1, { i32, i8* }, i64 } %10
}
