---
source: hugr-llvm/src/extension/int.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [24 x i8] c"Attempted division by 0\00", align 1

define private { i1, { i32, i8* }, i8 } @_hl.main.1(i8 %0, i8 %1) {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %valid_div = icmp ne i8 %1, 0
  %is_divisor_large = icmp ugt i8 %1, 127
  %2 = zext i1 %is_divisor_large to i8
  %is_dividend_negative = icmp slt i8 %0, 0
  %3 = zext i1 %is_dividend_negative to i8
  %4 = shl i8 %2, 1
  %tag = or i8 %4, %3
  %quotient = sdiv i8 %0, %1
  %remainder = srem i8 %0, %1
  %result = alloca { i8, i8 }, align 8
  switch i8 %tag, label %non_negative_smoldiv [
    i8 1, label %negative_smoldiv
    i8 2, label %non_negative_bigdiv
    i8 3, label %negative_bigdiv
  ]

negative_bigdiv:                                  ; preds = %entry_block
  %5 = add i8 %0, %1
  %6 = insertvalue { i8, i8 } { i8 -1, i8 poison }, i8 %5, 1
  store { i8, i8 } %6, { i8, i8 }* %result, align 1
  br label %finish

negative_smoldiv:                                 ; preds = %entry_block
  %7 = insertvalue { i8, i8 } poison, i8 %quotient, 0
  %8 = insertvalue { i8, i8 } %7, i8 0, 1
  %9 = sub i8 %quotient, 1
  %10 = add i8 %1, %remainder
  %11 = insertvalue { i8, i8 } poison, i8 %9, 0
  %12 = insertvalue { i8, i8 } %11, i8 %10, 1
  %is_rem_0 = icmp eq i8 %remainder, 0
  %13 = select i1 %is_rem_0, { i8, i8 } %8, { i8, i8 } %12
  store { i8, i8 } %13, { i8, i8 }* %result, align 1
  br label %finish

non_negative_bigdiv:                              ; preds = %entry_block
  %14 = insertvalue { i8, i8 } { i8 0, i8 poison }, i8 %0, 1
  store { i8, i8 } %14, { i8, i8 }* %result, align 1
  br label %finish

non_negative_smoldiv:                             ; preds = %entry_block
  %15 = insertvalue { i8, i8 } poison, i8 %quotient, 0
  %16 = insertvalue { i8, i8 } %15, i8 %remainder, 1
  store { i8, i8 } %16, { i8, i8 }* %result, align 1
  br label %finish

finish:                                           ; preds = %negative_bigdiv, %non_negative_bigdiv, %negative_smoldiv, %non_negative_smoldiv
  %result3 = load { i8, i8 }, { i8, i8 }* %result, align 1
  %17 = insertvalue { i1, { i8, i8 }, { i32, i8* } } { i1 true, { i8, i8 } poison, { i32, i8* } poison }, { i8, i8 } %result3, 1
  %18 = select i1 %valid_div, { i1, { i8, i8 }, { i32, i8* } } %17, { i1, { i8, i8 }, { i32, i8* } } { i1 false, { i8, i8 } poison, { i32, i8* } { i32 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @0, i32 0, i32 0) } }
  %19 = extractvalue { i1, { i8, i8 }, { i32, i8* } } %18, 1
  %20 = extractvalue { i8, i8 } %19, 0
  %21 = extractvalue { i8, i8 } %19, 1
  %22 = extractvalue { i1, { i8, i8 }, { i32, i8* } } %18, 2
  %tag4 = extractvalue { i1, { i8, i8 }, { i32, i8* } } %18, 0
  %data_variant = insertvalue { i1, { i32, i8* }, i8 } { i1 true, { i32, i8* } poison, i8 poison }, i8 %20, 2
  %err_variant = insertvalue { i1, { i32, i8* }, i8 } { i1 false, { i32, i8* } poison, i8 poison }, { i32, i8* } %22, 1
  %23 = select i1 %tag4, { i1, { i32, i8* }, i8 } %data_variant, { i1, { i32, i8* }, i8 } %err_variant
  ret { i1, { i32, i8* }, i8 } %23
}
