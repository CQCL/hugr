---
source: src/extension/rotation.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [47 x i8] c"tket2.rotation.from_halfturns_unchecked failed\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @_hl.main.1(double %0) {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  %1 = fcmp oeq double %0, 0x7FF0000000000000
  %2 = fcmp oeq double %0, 0xFFF0000000000000
  %3 = fcmp uno double %0, 0.000000e+00
  %4 = or i1 %1, %2
  %5 = or i1 %4, %3
  %6 = xor i1 %5, true
  br i1 %6, label %9, label %7

7:                                                ; preds = %entry_block
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @0, i32 0, i32 0))
  call void @abort()
  unreachable

9:                                                ; preds = %entry_block
  %10 = fdiv double %0, 2.000000e+00
  %11 = call double @llvm.floor.f64(double %10)
  %12 = fsub double %10, %11
  %13 = fmul double %12, 2.000000e+00
  %14 = fcmp oeq double %13, 0x7FF0000000000000
  %15 = fcmp oeq double %13, 0xFFF0000000000000
  %16 = fcmp uno double %13, 0.000000e+00
  %17 = or i1 %14, %15
  %18 = or i1 %17, %16
  %19 = xor i1 %18, true
  %20 = insertvalue { double } undef, double %13, 0
  %21 = insertvalue { i32, {}, { double } } { i32 1, {} poison, { double } poison }, { double } %20, 2
  %22 = select i1 %19, { i32, {}, { double } } %21, { i32, {}, { double } } { i32 0, {} undef, { double } poison }
  %23 = extractvalue { i32, {}, { double } } %22, 0
  switch i32 %23, label %24 [
    i32 1, label %26
  ]

24:                                               ; preds = %9
  %25 = extractvalue { i32, {}, { double } } %22, 1
  br label %cond_7_case_0

26:                                               ; preds = %9
  %27 = extractvalue { i32, {}, { double } } %22, 2
  %28 = extractvalue { double } %27, 0
  br label %cond_7_case_1

cond_7_case_0:                                    ; preds = %24
  %29 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %30 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %29, i8* %30)
  call void @abort()
  br label %cond_exit_7

cond_7_case_1:                                    ; preds = %26
  br label %cond_exit_7

cond_exit_7:                                      ; preds = %cond_7_case_1, %cond_7_case_0
  %"0.0" = phi double [ 0.000000e+00, %cond_7_case_0 ], [ %28, %cond_7_case_1 ]
  %32 = fadd double %0, %"0.0"
  ret void
}

declare i32 @printf(i8*, ...)

declare void @abort()

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #0

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
