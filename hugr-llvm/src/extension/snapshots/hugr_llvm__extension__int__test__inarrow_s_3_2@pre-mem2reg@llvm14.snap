---
source: hugr-llvm/src/extension/int.rs
expression: mod_str
---
; ModuleID = 'test_context'
source_filename = "test_context"

@0 = private unnamed_addr constant [25 x i8] c"Can't narrow into bounds\00", align 1

define { i1, { i32, i8* }, i8 } @_hl.main.1(i8 %0) {
alloca_block:
  %"0" = alloca { i1, { i32, i8* }, i8 }, align 8
  %"2_0" = alloca i8, align 1
  %"4_0" = alloca { i1, { i32, i8* }, i8 }, align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store i8 %0, i8* %"2_0", align 1
  %"2_01" = load i8, i8* %"2_0", align 1
  %upper_bounds_check = icmp sgt i8 %"2_01", 7
  %lower_bounds_check = icmp slt i8 %"2_01", -8
  %outside_range = or i1 %upper_bounds_check, %lower_bounds_check
  %1 = insertvalue { i1, { i32, i8* }, i8 } { i1 true, { i32, i8* } poison, i8 poison }, i8 %"2_01", 2
  %2 = select i1 %outside_range, { i1, { i32, i8* }, i8 } { i1 false, { i32, i8* } { i32 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @0, i32 0, i32 0) }, i8 poison }, { i1, { i32, i8* }, i8 } %1
  store { i1, { i32, i8* }, i8 } %2, { i1, { i32, i8* }, i8 }* %"4_0", align 8
  %"4_02" = load { i1, { i32, i8* }, i8 }, { i1, { i32, i8* }, i8 }* %"4_0", align 8
  store { i1, { i32, i8* }, i8 } %"4_02", { i1, { i32, i8* }, i8 }* %"0", align 8
  %"03" = load { i1, { i32, i8* }, i8 }, { i1, { i32, i8* }, i8 }* %"0", align 8
  ret { i1, { i32, i8* }, i8 } %"03"
}
