---
source: tests/guppy.rs
expression: module_string
---
; ModuleID = 'test_context'
source_filename = "test_context"

define i16 @_hl.rus.35(i16 %0, i64 %1) {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  br label %2

2:                                                ; preds = %entry_block
  switch i32 0, label %3 [
  ]

3:                                                ; preds = %2
  %4 = extractvalue { {} } undef, 0
  br label %5

5:                                                ; preds = %78, %70, %3
  %"7_2.0" = phi i16 [ %0, %3 ], [ %"7_2.0", %70 ], [ %76, %78 ]
  %"7_1.0" = phi i64 [ %1, %3 ], [ %90, %70 ], [ %98, %78 ]
  %"7_0.0" = phi i64 [ 0, %3 ], [ %89, %70 ], [ %77, %78 ]
  %6 = icmp slt i64 %"7_0.0", %"7_1.0"
  %7 = select i1 %6, { i32, {}, {} } { i32 1, {} poison, {} undef }, { i32, {}, {} } { i32 0, {} undef, {} poison }
  %8 = extractvalue { i32, {}, {} } %7, 0
  switch i32 %8, label %9 [
    i32 1, label %11
  ]

9:                                                ; preds = %5
  %10 = extractvalue { i32, {}, {} } %7, 1
  br label %cond_43_case_0

11:                                               ; preds = %5
  %12 = extractvalue { i32, {}, {} } %7, 2
  br label %cond_43_case_1

13:                                               ; preds = %87
  %14 = call i16 @QAlloc()
  %15 = call i16 @Reset(i16 %14)
  %16 = call i16 @H(i16 %15)
  %17 = call i16 @QAlloc()
  %18 = call i16 @Reset(i16 %17)
  %19 = call i16 @H(i16 %18)
  %20 = insertvalue { i16, i16 } undef, i16 %19, 0
  %21 = insertvalue { i16, i16 } %20, i16 %16, 1
  %22 = insertvalue { { i16, i16 } } poison, { i16, i16 } %21, 0
  %23 = extractvalue { { i16, i16 } } %22, 0
  %24 = extractvalue { i16, i16 } %23, 0
  %25 = extractvalue { i16, i16 } %23, 1
  %26 = call i16 @Tdg(i16 %24)
  %27 = call { i16, i16 } @CX(i16 %25, i16 %26)
  %28 = extractvalue { i16, i16 } %27, 0
  %29 = extractvalue { i16, i16 } %27, 1
  %30 = insertvalue { i16, i16 } undef, i16 %28, 0
  %31 = insertvalue { i16, i16 } %30, i16 %29, 1
  %32 = insertvalue { { i16, i16 } } poison, { i16, i16 } %31, 0
  %33 = extractvalue { { i16, i16 } } %32, 0
  %34 = extractvalue { i16, i16 } %33, 0
  %35 = extractvalue { i16, i16 } %33, 1
  %36 = call i16 @T(i16 %35)
  %37 = call { i16, { i32, {}, {} } } @Measure(i16 %36)
  %38 = extractvalue { i16, { i32, {}, {} } } %37, 0
  %39 = extractvalue { i16, { i32, {}, {} } } %37, 1
  call void @QFree(i16 %38)
  %40 = extractvalue { i32, {}, {} } %39, 0
  switch i32 %40, label %41 [
    i32 1, label %43
  ]

41:                                               ; preds = %13
  %42 = extractvalue { i32, {}, {} } %39, 1
  br label %69

43:                                               ; preds = %13
  %44 = extractvalue { i32, {}, {} } %39, 2
  br label %48

45:                                               ; preds = %73, %85
  %"11_0.0" = phi i16 [ %"7_2.0", %85 ], [ %58, %73 ]
  switch i32 0, label %46 [
  ]

46:                                               ; preds = %45
  %47 = extractvalue { {} } undef, 0
  br label %80

48:                                               ; preds = %43
  %49 = call i16 @T(i16 %"7_2.0")
  %50 = call i16 @Z(i16 %49)
  %51 = call { i16, i16 } @CX(i16 %50, i16 %34)
  %52 = extractvalue { i16, i16 } %51, 0
  %53 = extractvalue { i16, i16 } %51, 1
  %54 = insertvalue { i16, i16 } undef, i16 %52, 0
  %55 = insertvalue { i16, i16 } %54, i16 %53, 1
  %56 = insertvalue { { i16, i16 } } poison, { i16, i16 } %55, 0
  %57 = extractvalue { { i16, i16 } } %56, 0
  %58 = extractvalue { i16, i16 } %57, 0
  %59 = extractvalue { i16, i16 } %57, 1
  %60 = call i16 @T(i16 %59)
  %61 = call { i16, { i32, {}, {} } } @Measure(i16 %60)
  %62 = extractvalue { i16, { i32, {}, {} } } %61, 0
  %63 = extractvalue { i16, { i32, {}, {} } } %61, 1
  %64 = extractvalue { i32, {}, {} } %63, 0
  switch i32 %64, label %65 [
    i32 1, label %67
  ]

65:                                               ; preds = %48
  %66 = extractvalue { i32, {}, {} } %63, 1
  br label %cond_75_case_0

67:                                               ; preds = %48
  %68 = extractvalue { i32, {}, {} } %63, 2
  br label %cond_75_case_1

69:                                               ; preds = %41
  call void @QFree(i16 %34)
  switch i32 0, label %70 [
  ]

70:                                               ; preds = %69
  %71 = extractvalue { {} } undef, 0
  br label %5

72:                                               ; preds = %99
  switch i32 0, label %73 [
  ]

73:                                               ; preds = %72
  %74 = extractvalue { {} } undef, 0
  br label %45

75:                                               ; preds = %95
  %76 = call i16 @X(i16 %58)
  %77 = add i64 %97, 1
  switch i32 0, label %78 [
  ]

78:                                               ; preds = %75
  %79 = extractvalue { {} } undef, 0
  br label %5

80:                                               ; preds = %46
  ret i16 %"11_0.0"

cond_43_case_0:                                   ; preds = %9
  br label %cond_exit_43

cond_43_case_1:                                   ; preds = %11
  %81 = insertvalue { i64, i64 } undef, i64 %"7_0.0", 0
  %82 = insertvalue { i64, i64 } %81, i64 %"7_1.0", 1
  %83 = insertvalue { i32, {}, { i64, i64 } } { i32 1, {} poison, { i64, i64 } poison }, { i64, i64 } %82, 2
  br label %cond_exit_43

cond_exit_43:                                     ; preds = %cond_43_case_1, %cond_43_case_0
  %"021.0" = phi { i32, {}, { i64, i64 } } [ { i32 0, {} undef, { i64, i64 } poison }, %cond_43_case_0 ], [ %83, %cond_43_case_1 ]
  %84 = extractvalue { i32, {}, { i64, i64 } } %"021.0", 0
  switch i32 %84, label %85 [
    i32 1, label %87
  ]

85:                                               ; preds = %cond_exit_43
  %86 = extractvalue { i32, {}, { i64, i64 } } %"021.0", 1
  br label %45

87:                                               ; preds = %cond_exit_43
  %88 = extractvalue { i32, {}, { i64, i64 } } %"021.0", 2
  %89 = extractvalue { i64, i64 } %88, 0
  %90 = extractvalue { i64, i64 } %88, 1
  br label %13

cond_75_case_0:                                   ; preds = %65
  %91 = insertvalue { i64, i64 } undef, i64 %89, 0
  %92 = insertvalue { i64, i64 } %91, i64 %90, 1
  %93 = insertvalue { i32, { i64, i64 }, {} } { i32 0, { i64, i64 } poison, {} poison }, { i64, i64 } %92, 1
  br label %cond_exit_75

cond_75_case_1:                                   ; preds = %67
  br label %cond_exit_75

cond_exit_75:                                     ; preds = %cond_75_case_1, %cond_75_case_0
  %"079.0" = phi { i32, { i64, i64 }, {} } [ %93, %cond_75_case_0 ], [ { i32 1, { i64, i64 } poison, {} undef }, %cond_75_case_1 ]
  call void @QFree(i16 %62)
  %94 = extractvalue { i32, { i64, i64 }, {} } %"079.0", 0
  switch i32 %94, label %95 [
    i32 1, label %99
  ]

95:                                               ; preds = %cond_exit_75
  %96 = extractvalue { i32, { i64, i64 }, {} } %"079.0", 1
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = extractvalue { i64, i64 } %96, 1
  br label %75

99:                                               ; preds = %cond_exit_75
  %100 = extractvalue { i32, { i64, i64 }, {} } %"079.0", 2
  br label %72
}

declare i16 @QAlloc()

declare i16 @Reset(i16)

declare i16 @H(i16)

declare i16 @Tdg(i16)

declare { i16, i16 } @CX(i16, i16)

declare i16 @T(i16)

declare { i16, { i32, {}, {} } } @Measure(i16)

declare void @QFree(i16)

declare i16 @Z(i16)

declare i16 @X(i16)

define { i32, {}, {} } @_hl.main.36() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  br label %0

0:                                                ; preds = %entry_block
  %1 = call i16 @QAlloc()
  %2 = call i16 @Reset(i16 %1)
  %3 = call i16 @_hl.rus.35(i16 %2, i64 100)
  %4 = call { i16, { i32, {}, {} } } @Measure(i16 %3)
  %5 = extractvalue { i16, { i32, {}, {} } } %4, 0
  %6 = extractvalue { i16, { i32, {}, {} } } %4, 1
  call void @QFree(i16 %5)
  switch i32 0, label %7 [
  ]

7:                                                ; preds = %0
  %8 = extractvalue { {} } undef, 0
  br label %9

9:                                                ; preds = %7
  ret { i32, {}, {} } %6
}
