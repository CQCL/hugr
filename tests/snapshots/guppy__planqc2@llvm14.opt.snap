---
source: tests/guppy.rs
expression: module_string
---
; ModuleID = 'test_context'
source_filename = "test_context"

define i16 @_hl.teleport.25(i16 %0, i16 %1) {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  br label %2

2:                                                ; preds = %entry_block
  %3 = call i16 @QAlloc()
  %4 = call i16 @H(i16 %3)
  %5 = call { i16, i16 } @CX(i16 %4, i16 %1)
  %6 = extractvalue { i16, i16 } %5, 0
  %7 = extractvalue { i16, i16 } %5, 1
  %8 = insertvalue { i16, i16 } undef, i16 %6, 0
  %9 = insertvalue { i16, i16 } %8, i16 %7, 1
  %10 = insertvalue { { i16, i16 } } poison, { i16, i16 } %9, 0
  %11 = extractvalue { { i16, i16 } } %10, 0
  %12 = extractvalue { i16, i16 } %11, 0
  %13 = extractvalue { i16, i16 } %11, 1
  %14 = call { i16, i16 } @CX(i16 %0, i16 %12)
  %15 = extractvalue { i16, i16 } %14, 0
  %16 = extractvalue { i16, i16 } %14, 1
  %17 = insertvalue { i16, i16 } undef, i16 %15, 0
  %18 = insertvalue { i16, i16 } %17, i16 %16, 1
  %19 = insertvalue { { i16, i16 } } poison, { i16, i16 } %18, 0
  %20 = extractvalue { { i16, i16 } } %19, 0
  %21 = extractvalue { i16, i16 } %20, 0
  %22 = extractvalue { i16, i16 } %20, 1
  %23 = call i16 @H(i16 %21)
  %24 = call { i16, { i32, {}, {} } } @Measure(i16 %23)
  %25 = extractvalue { i16, { i32, {}, {} } } %24, 0
  %26 = extractvalue { i16, { i32, {}, {} } } %24, 1
  call void @QFree(i16 %25)
  %27 = extractvalue { i32, {}, {} } %26, 0
  switch i32 %27, label %28 [
    i32 1, label %30
  ]

28:                                               ; preds = %2
  %29 = extractvalue { i32, {}, {} } %26, 1
  br label %36

30:                                               ; preds = %2
  %31 = extractvalue { i32, {}, {} } %26, 2
  br label %32

32:                                               ; preds = %30
  %33 = call i16 @Z(i16 %13)
  switch i32 0, label %34 [
  ]

34:                                               ; preds = %32
  %35 = extractvalue { {} } undef, 0
  br label %39

36:                                               ; preds = %28
  switch i32 0, label %37 [
  ]

37:                                               ; preds = %36
  %38 = extractvalue { {} } undef, 0
  br label %39

39:                                               ; preds = %37, %34
  %"9_0.0" = phi i16 [ %13, %37 ], [ %33, %34 ]
  %40 = call { i16, { i32, {}, {} } } @Measure(i16 %22)
  %41 = extractvalue { i16, { i32, {}, {} } } %40, 0
  %42 = extractvalue { i16, { i32, {}, {} } } %40, 1
  call void @QFree(i16 %41)
  %43 = extractvalue { i32, {}, {} } %42, 0
  switch i32 %43, label %44 [
    i32 1, label %46
  ]

44:                                               ; preds = %39
  %45 = extractvalue { i32, {}, {} } %42, 1
  br label %52

46:                                               ; preds = %39
  %47 = extractvalue { i32, {}, {} } %42, 2
  br label %48

48:                                               ; preds = %46
  %49 = call i16 @X(i16 %"9_0.0")
  switch i32 0, label %50 [
  ]

50:                                               ; preds = %48
  %51 = extractvalue { {} } undef, 0
  br label %55

52:                                               ; preds = %44
  switch i32 0, label %53 [
  ]

53:                                               ; preds = %52
  %54 = extractvalue { {} } undef, 0
  br label %55

55:                                               ; preds = %53, %50
  %"12_0.0" = phi i16 [ %"9_0.0", %53 ], [ %49, %50 ]
  switch i32 0, label %56 [
  ]

56:                                               ; preds = %55
  %57 = extractvalue { {} } undef, 0
  br label %58

58:                                               ; preds = %56
  ret i16 %"12_0.0"
}

declare i16 @QAlloc()

declare i16 @H(i16)

declare { i16, i16 } @CX(i16, i16)

declare { i16, { i32, {}, {} } } @Measure(i16)

declare void @QFree(i16)

declare i16 @Z(i16)

declare i16 @X(i16)

define { i32, {}, {} } @_hl.main.26() {
alloca_block:
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  br label %0

0:                                                ; preds = %entry_block
  %1 = call i16 @QAlloc()
  %2 = call i16 @QAlloc()
  %3 = insertvalue { i16, i16 } undef, i16 %2, 0
  %4 = insertvalue { i16, i16 } %3, i16 %1, 1
  %5 = insertvalue { { i16, i16 } } poison, { i16, i16 } %4, 0
  %6 = extractvalue { { i16, i16 } } %5, 0
  %7 = extractvalue { i16, i16 } %6, 0
  %8 = extractvalue { i16, i16 } %6, 1
  %9 = call i16 @_hl.teleport.25(i16 %7, i16 %8)
  %10 = call { i16, { i32, {}, {} } } @Measure(i16 %9)
  %11 = extractvalue { i16, { i32, {}, {} } } %10, 0
  %12 = extractvalue { i16, { i32, {}, {} } } %10, 1
  call void @QFree(i16 %11)
  switch i32 0, label %13 [
  ]

13:                                               ; preds = %0
  %14 = extractvalue { {} } undef, 0
  br label %15

15:                                               ; preds = %13
  ret { i32, {}, {} } %12
}
