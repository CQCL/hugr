(hugr 0)

(define-func example.bools
  []
  [(adt [[] []]) (adt [[] []])]
  (ext)
  (dfg [] [%false %true]
    (signature (-> [] [(adt [[] []]) (adt [[] []])] (ext)))
    (const (tag 0 []) [] [%false]
      (signature (-> [] [(adt [[] []])] (ext))))
    (const (tag 1 []) [] [%true]
      (signature (-> [] [(adt [[] []])] (ext))))))

(define-func example.make-pair
  []
  [(adt [[(@ arithmetic.float.types.float64) (@ arithmetic.float.types.float64)]])]
  (ext)
  (dfg [] [%pair]
    (signature
      (->
        []
        [(adt [[(@ arithmetic.float.types.float64) (@ arithmetic.float.types.float64)]])]
        (ext)))
    (const
      (tag
        0
        [(@ prelude.const-json (@ arithmetic.float.types.float64) "{\"c\":\"ConstF64\",\"v\":{\"value\":2.0}}" (ext))
         (@ prelude.const-json (@ arithmetic.float.types.float64) "{\"c\":\"ConstF64\",\"v\":{\"value\":3.0}}" (ext))])
      [] [%pair]
      (signature
        (->
          []
          [(adt [[(@ arithmetic.float.types.float64) (@ arithmetic.float.types.float64)]])]
          (ext))))))

(define-func example.f64
  []
  [(@ arithmetic.float.types.float64)]
  (ext)
  (dfg [] [%0 %1]
    (signature (-> [] [(@ arithmetic.float.types.float64) (@ arithmetic.float.types.float64)] (ext)))
    (const
      (@ prelude.const-json (@ arithmetic.float.types.float64) "{\"c\":\"ConstF64\",\"v\":{\"value\":1.0}}" (ext))
      [] [%0]
      (signature (-> [] [(@ arithmetic.float.types.float64)] (ext))))
    ; The following const is to test that import/export can deal with unknown constants.
    (const
      (@ prelude.const-json (@ arithmetic.float.types.float64) "{\"c\":\"ConstUnknown\",\"v\":{\"value\":1.0}}" (ext))
      [] [%1]
      (signature (-> [] [(@ arithmetic.float.types.float64)] (ext))))))
