{
    "$defs": {
        "Alias": {
            "description": "An Alias Type",
            "properties": {
                "t": {
                    "const": "Alias",
                    "default": "Alias",
                    "enum": [
                        "Alias"
                    ],
                    "title": "T",
                    "type": "string"
                },
                "bound": {
                    "$ref": "#/$defs/TypeBound"
                },
                "name": {
                    "title": "Name",
                    "type": "string"
                }
            },
            "required": [
                "bound",
                "name"
            ],
            "title": "Alias",
            "type": "object"
        },
        "Array": {
            "description": "Known size array whose elements are of the same type.",
            "properties": {
                "ty": {
                    "$ref": "#/$defs/Type"
                },
                "t": {
                    "const": "Array",
                    "default": "Array",
                    "enum": [
                        "Array"
                    ],
                    "title": "T",
                    "type": "string"
                },
                "len": {
                    "title": "Len",
                    "type": "integer"
                }
            },
            "required": [
                "ty",
                "len"
            ],
            "title": "Array",
            "type": "object"
        },
        "BoundedNatArg": {
            "properties": {
                "tya": {
                    "const": "BoundedNat",
                    "default": "BoundedNat",
                    "enum": [
                        "BoundedNat"
                    ],
                    "title": "Tya",
                    "type": "string"
                },
                "n": {
                    "title": "N",
                    "type": "integer"
                }
            },
            "required": [
                "n"
            ],
            "title": "BoundedNatArg",
            "type": "object"
        },
        "BoundedNatParam": {
            "properties": {
                "tp": {
                    "const": "BoundedNat",
                    "default": "BoundedNat",
                    "enum": [
                        "BoundedNat"
                    ],
                    "title": "Tp",
                    "type": "string"
                },
                "bound": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "title": "Bound"
                }
            },
            "required": [
                "bound"
            ],
            "title": "BoundedNatParam",
            "type": "object"
        },
        "CustomTypeArg": {
            "properties": {
                "typ": {
                    "title": "Typ",
                    "type": "null"
                },
                "value": {
                    "title": "Value",
                    "type": "string"
                }
            },
            "required": [
                "typ",
                "value"
            ],
            "title": "CustomTypeArg",
            "type": "object"
        },
        "ExtensionSet": {
            "anyOf": [
                {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "description": "A set of extensions ids.",
            "title": "ExtensionSet"
        },
        "ExtensionValue": {
            "description": "An extension constant value, that can check it is of a given [CustomType].",
            "properties": {
                "c": {
                    "const": "Extension",
                    "default": "Extension",
                    "enum": [
                        "Extension"
                    ],
                    "title": "ValueTag",
                    "type": "string"
                },
                "e": {
                    "title": "CustomConst"
                }
            },
            "required": [
                "c",
                "e"
            ],
            "title": "ExtensionValue",
            "type": "object"
        },
        "ExtensionsArg": {
            "properties": {
                "tya": {
                    "const": "Extensions",
                    "default": "Extensions",
                    "enum": [
                        "Extensions"
                    ],
                    "title": "Tya",
                    "type": "string"
                },
                "es": {
                    "$ref": "#/$defs/ExtensionSet"
                }
            },
            "required": [
                "es"
            ],
            "title": "ExtensionsArg",
            "type": "object"
        },
        "FunctionType": {
            "description": "A graph encoded as a value. It contains a concrete signature and a set of required resources.",
            "properties": {
                "t": {
                    "const": "G",
                    "default": "G",
                    "enum": [
                        "G"
                    ],
                    "title": "T",
                    "type": "string"
                },
                "input": {
                    "items": {
                        "$ref": "#/$defs/Type"
                    },
                    "title": "Input",
                    "type": "array"
                },
                "output": {
                    "items": {
                        "$ref": "#/$defs/Type"
                    },
                    "title": "Output",
                    "type": "array"
                },
                "extension_reqs": {
                    "$ref": "#/$defs/ExtensionSet"
                }
            },
            "required": [
                "input",
                "output"
            ],
            "title": "FunctionType",
            "type": "object"
        },
        "FunctionValue": {
            "description": "A higher-order function value.",
            "properties": {
                "c": {
                    "const": "Function",
                    "default": "Function",
                    "enum": [
                        "Function"
                    ],
                    "title": "ValueTag",
                    "type": "string"
                },
                "hugr": {
                    "title": "Hugr"
                }
            },
            "required": [
                "c",
                "hugr"
            ],
            "title": "FunctionValue",
            "type": "object"
        },
        "GeneralSum": {
            "description": "General sum type that explicitly stores the types of the variants.",
            "properties": {
                "s": {
                    "const": "General",
                    "default": "General",
                    "enum": [
                        "General"
                    ],
                    "title": "S",
                    "type": "string"
                },
                "rows": {
                    "items": {
                        "items": {
                            "$ref": "#/$defs/Type"
                        },
                        "type": "array"
                    },
                    "title": "Rows",
                    "type": "array"
                }
            },
            "required": [
                "rows"
            ],
            "title": "GeneralSum",
            "type": "object"
        },
        "ListParam": {
            "properties": {
                "tp": {
                    "const": "List",
                    "default": "List",
                    "enum": [
                        "List"
                    ],
                    "title": "Tp",
                    "type": "string"
                },
                "param": {
                    "$ref": "#/$defs/TypeParam"
                }
            },
            "required": [
                "param"
            ],
            "title": "ListParam",
            "type": "object"
        },
        "Opaque": {
            "description": "An opaque Type that can be downcasted by the extensions that define it.",
            "properties": {
                "t": {
                    "const": "Opaque",
                    "default": "Opaque",
                    "enum": [
                        "Opaque"
                    ],
                    "title": "T",
                    "type": "string"
                },
                "extension": {
                    "title": "Extension",
                    "type": "string"
                },
                "id": {
                    "title": "Id",
                    "type": "string"
                },
                "args": {
                    "items": {
                        "$ref": "#/$defs/TypeArg"
                    },
                    "title": "Args",
                    "type": "array"
                },
                "bound": {
                    "$ref": "#/$defs/TypeBound"
                }
            },
            "required": [
                "extension",
                "id",
                "args",
                "bound"
            ],
            "title": "Opaque",
            "type": "object"
        },
        "OpaqueArg": {
            "properties": {
                "tya": {
                    "const": "Opaque",
                    "default": "Opaque",
                    "enum": [
                        "Opaque"
                    ],
                    "title": "Tya",
                    "type": "string"
                },
                "arg": {
                    "$ref": "#/$defs/CustomTypeArg"
                }
            },
            "required": [
                "arg"
            ],
            "title": "OpaqueArg",
            "type": "object"
        },
        "OpaqueParam": {
            "properties": {
                "tp": {
                    "const": "Opaque",
                    "default": "Opaque",
                    "enum": [
                        "Opaque"
                    ],
                    "title": "Tp",
                    "type": "string"
                },
                "ty": {
                    "$ref": "#/$defs/Opaque"
                }
            },
            "required": [
                "ty"
            ],
            "title": "OpaqueParam",
            "type": "object"
        },
        "PolyFuncType": {
            "description": "A polymorphic type scheme, i.e. of a FuncDecl, FuncDefn or OpDef.  (Nodes/operations in the Hugr are not polymorphic.)",
            "properties": {
                "params": {
                    "items": {
                        "$ref": "#/$defs/TypeParam"
                    },
                    "title": "Params",
                    "type": "array"
                },
                "body": {
                    "$ref": "#/$defs/FunctionType"
                }
            },
            "required": [
                "params",
                "body"
            ],
            "title": "PolyFuncType",
            "type": "object"
        },
        "Qubit": {
            "description": "A qubit.",
            "properties": {
                "t": {
                    "const": "Q",
                    "default": "Q",
                    "enum": [
                        "Q"
                    ],
                    "title": "T",
                    "type": "string"
                }
            },
            "title": "Qubit",
            "type": "object"
        },
        "SequenceArg": {
            "properties": {
                "tya": {
                    "const": "Sequence",
                    "default": "Sequence",
                    "enum": [
                        "Sequence"
                    ],
                    "title": "Tya",
                    "type": "string"
                },
                "args": {
                    "items": {
                        "$ref": "#/$defs/TypeArg"
                    },
                    "title": "Args",
                    "type": "array"
                }
            },
            "required": [
                "args"
            ],
            "title": "SequenceArg",
            "type": "object"
        },
        "SumType": {
            "discriminator": {
                "mapping": {
                    "General": "#/$defs/GeneralSum",
                    "Unit": "#/$defs/UnitSum"
                },
                "propertyName": "s"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/UnitSum"
                },
                {
                    "$ref": "#/$defs/GeneralSum"
                }
            ],
            "title": "SumType"
        },
        "SumValue": {
            "description": "A Sum variant For any Sum type where this value meets the type of the variant indicated by the tag.",
            "properties": {
                "c": {
                    "const": "Sum",
                    "default": "Sum",
                    "enum": [
                        "Sum"
                    ],
                    "title": "ValueTag",
                    "type": "string"
                },
                "tag": {
                    "title": "Tag",
                    "type": "integer"
                },
                "typ": {
                    "$ref": "#/$defs/SumType"
                },
                "vs": {
                    "items": {
                        "$ref": "#/$defs/Value"
                    },
                    "title": "Vs",
                    "type": "array"
                }
            },
            "required": [
                "c",
                "tag",
                "typ",
                "vs"
            ],
            "title": "SumValue",
            "type": "object"
        },
        "TaggedSumType": {
            "properties": {
                "t": {
                    "const": "Sum",
                    "default": "Sum",
                    "enum": [
                        "Sum"
                    ],
                    "title": "T",
                    "type": "string"
                },
                "st": {
                    "$ref": "#/$defs/SumType"
                }
            },
            "required": [
                "st"
            ],
            "title": "TaggedSumType",
            "type": "object"
        },
        "TupleParam": {
            "properties": {
                "tp": {
                    "const": "Tuple",
                    "default": "Tuple",
                    "enum": [
                        "Tuple"
                    ],
                    "title": "Tp",
                    "type": "string"
                },
                "params": {
                    "items": {
                        "$ref": "#/$defs/TypeParam"
                    },
                    "title": "Params",
                    "type": "array"
                }
            },
            "required": [
                "params"
            ],
            "title": "TupleParam",
            "type": "object"
        },
        "TupleValue": {
            "description": "A constant tuple value.",
            "properties": {
                "c": {
                    "const": "Tuple",
                    "default": "Tuple",
                    "enum": [
                        "Tuple"
                    ],
                    "title": "ValueTag",
                    "type": "string"
                },
                "vs": {
                    "items": {
                        "$ref": "#/$defs/Value"
                    },
                    "title": "Vs",
                    "type": "array"
                }
            },
            "required": [
                "c",
                "vs"
            ],
            "title": "TupleValue",
            "type": "object"
        },
        "Type": {
            "description": "A HUGR type.",
            "discriminator": {
                "mapping": {
                    "Alias": "#/$defs/Alias",
                    "Array": "#/$defs/Array",
                    "G": "#/$defs/FunctionType",
                    "I": "#/$defs/USize",
                    "Opaque": "#/$defs/Opaque",
                    "Q": "#/$defs/Qubit",
                    "Sum": "#/$defs/TaggedSumType",
                    "V": "#/$defs/Variable"
                },
                "propertyName": "t"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/Qubit"
                },
                {
                    "$ref": "#/$defs/Variable"
                },
                {
                    "$ref": "#/$defs/USize"
                },
                {
                    "$ref": "#/$defs/FunctionType"
                },
                {
                    "$ref": "#/$defs/Array"
                },
                {
                    "$ref": "#/$defs/TaggedSumType"
                },
                {
                    "$ref": "#/$defs/Opaque"
                },
                {
                    "$ref": "#/$defs/Alias"
                }
            ],
            "title": "Type"
        },
        "TypeArg": {
            "description": "A type argument.",
            "discriminator": {
                "mapping": {
                    "BoundedNat": "#/$defs/BoundedNatArg",
                    "Extensions": "#/$defs/ExtensionsArg",
                    "Opaque": "#/$defs/OpaqueArg",
                    "Sequence": "#/$defs/SequenceArg",
                    "Type": "#/$defs/TypeTypeArg"
                },
                "propertyName": "tya"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/TypeTypeArg"
                },
                {
                    "$ref": "#/$defs/BoundedNatArg"
                },
                {
                    "$ref": "#/$defs/OpaqueArg"
                },
                {
                    "$ref": "#/$defs/SequenceArg"
                },
                {
                    "$ref": "#/$defs/ExtensionsArg"
                }
            ],
            "title": "TypeArg"
        },
        "TypeBound": {
            "enum": [
                "E",
                "C",
                "A"
            ],
            "title": "TypeBound",
            "type": "string"
        },
        "TypeParam": {
            "description": "A type parameter.",
            "discriminator": {
                "mapping": {
                    "BoundedNat": "#/$defs/BoundedNatParam",
                    "List": "#/$defs/ListParam",
                    "Opaque": "#/$defs/OpaqueParam",
                    "Tuple": "#/$defs/TupleParam",
                    "Type": "#/$defs/TypeTypeParam"
                },
                "propertyName": "tp"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/TypeTypeParam"
                },
                {
                    "$ref": "#/$defs/BoundedNatParam"
                },
                {
                    "$ref": "#/$defs/OpaqueParam"
                },
                {
                    "$ref": "#/$defs/ListParam"
                },
                {
                    "$ref": "#/$defs/TupleParam"
                }
            ],
            "title": "TypeParam"
        },
        "TypeTypeArg": {
            "properties": {
                "tya": {
                    "const": "Type",
                    "default": "Type",
                    "enum": [
                        "Type"
                    ],
                    "title": "Tya",
                    "type": "string"
                },
                "ty": {
                    "$ref": "#/$defs/Type"
                }
            },
            "required": [
                "ty"
            ],
            "title": "TypeTypeArg",
            "type": "object"
        },
        "TypeTypeParam": {
            "properties": {
                "tp": {
                    "const": "Type",
                    "default": "Type",
                    "enum": [
                        "Type"
                    ],
                    "title": "Tp",
                    "type": "string"
                },
                "b": {
                    "$ref": "#/$defs/TypeBound"
                }
            },
            "required": [
                "b"
            ],
            "title": "TypeTypeParam",
            "type": "object"
        },
        "USize": {
            "description": "Unsigned integer size type.",
            "properties": {
                "t": {
                    "const": "I",
                    "default": "I",
                    "enum": [
                        "I"
                    ],
                    "title": "T",
                    "type": "string"
                }
            },
            "title": "USize",
            "type": "object"
        },
        "UnitSum": {
            "description": "Simple sum type where all variants are empty tuples.",
            "properties": {
                "s": {
                    "const": "Unit",
                    "default": "Unit",
                    "enum": [
                        "Unit"
                    ],
                    "title": "S",
                    "type": "string"
                },
                "size": {
                    "title": "Size",
                    "type": "integer"
                }
            },
            "required": [
                "size"
            ],
            "title": "UnitSum",
            "type": "object"
        },
        "Value": {
            "description": "A constant Value.",
            "discriminator": {
                "mapping": {
                    "Extension": "#/$defs/ExtensionValue",
                    "Function": "#/$defs/FunctionValue",
                    "Sum": "#/$defs/SumValue",
                    "Tuple": "#/$defs/TupleValue"
                },
                "propertyName": "c"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/ExtensionValue"
                },
                {
                    "$ref": "#/$defs/FunctionValue"
                },
                {
                    "$ref": "#/$defs/TupleValue"
                },
                {
                    "$ref": "#/$defs/SumValue"
                }
            ],
            "title": "Value"
        },
        "Variable": {
            "description": "A type variable identified by an index into the array of TypeParams.",
            "properties": {
                "t": {
                    "const": "V",
                    "default": "V",
                    "enum": [
                        "V"
                    ],
                    "title": "T",
                    "type": "string"
                },
                "i": {
                    "title": "I",
                    "type": "integer"
                },
                "b": {
                    "$ref": "#/$defs/TypeBound"
                }
            },
            "required": [
                "i",
                "b"
            ],
            "title": "Variable",
            "type": "object"
        }
    },
    "description": "A serializable representation of a Hugr Type, SumType, or Value. Intended for testing only.",
    "properties": {
        "version": {
            "const": "v1",
            "default": "v1",
            "enum": [
                "v1"
            ],
            "title": "Version",
            "type": "string"
        },
        "typ": {
            "anyOf": [
                {
                    "$ref": "#/$defs/Type"
                },
                {
                    "type": "null"
                }
            ],
            "default": null
        },
        "sum_type": {
            "anyOf": [
                {
                    "$ref": "#/$defs/SumType"
                },
                {
                    "type": "null"
                }
            ],
            "default": null
        },
        "poly_func_type": {
            "anyOf": [
                {
                    "$ref": "#/$defs/PolyFuncType"
                },
                {
                    "type": "null"
                }
            ],
            "default": null
        },
        "value": {
            "anyOf": [
                {
                    "$ref": "#/$defs/Value"
                },
                {
                    "type": "null"
                }
            ],
            "default": null
        }
    },
    "title": "HugrTesting",
    "type": "object"
}